// This file was auto-generated by Fern from our API Definition.

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { McpApprovalPolicy } from "./McpApprovalPolicy";
import { McpToolApprovalHash } from "./McpToolApprovalHash";
import { McpServerTransport } from "./McpServerTransport";
import { McpServerConfigInputUrl } from "./McpServerConfigInputUrl";
import { McpServerConfigInputSecretToken } from "./McpServerConfigInputSecretToken";
import { McpServerConfigInputRequestHeadersValue } from "./McpServerConfigInputRequestHeadersValue";

export const McpServerConfigInput: core.serialization.ObjectSchema<
    serializers.McpServerConfigInput.Raw,
    ElevenLabs.McpServerConfigInput
> = core.serialization.object({
    approvalPolicy: core.serialization.property("approval_policy", McpApprovalPolicy.optional()),
    toolApprovalHashes: core.serialization.property(
        "tool_approval_hashes",
        core.serialization.list(McpToolApprovalHash).optional(),
    ),
    transport: McpServerTransport.optional(),
    url: McpServerConfigInputUrl,
    secretToken: core.serialization.property("secret_token", McpServerConfigInputSecretToken.optional()),
    requestHeaders: core.serialization.property(
        "request_headers",
        core.serialization.record(core.serialization.string(), McpServerConfigInputRequestHeadersValue).optional(),
    ),
    name: core.serialization.string(),
    description: core.serialization.string().optional(),
    forcePreToolSpeech: core.serialization.property("force_pre_tool_speech", core.serialization.boolean().optional()),
    disableInterruptions: core.serialization.property("disable_interruptions", core.serialization.boolean().optional()),
});

export declare namespace McpServerConfigInput {
    export interface Raw {
        approval_policy?: McpApprovalPolicy.Raw | null;
        tool_approval_hashes?: McpToolApprovalHash.Raw[] | null;
        transport?: McpServerTransport.Raw | null;
        url: McpServerConfigInputUrl.Raw;
        secret_token?: McpServerConfigInputSecretToken.Raw | null;
        request_headers?: Record<string, McpServerConfigInputRequestHeadersValue.Raw> | null;
        name: string;
        description?: string | null;
        force_pre_tool_speech?: boolean | null;
        disable_interruptions?: boolean | null;
    }
}
