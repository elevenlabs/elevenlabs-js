// This file was auto-generated by Fern from our API Definition.

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { GetConversationResponseModelStatus } from "./GetConversationResponseModelStatus";
import { ConversationHistoryTranscriptCommonModelOutput } from "./ConversationHistoryTranscriptCommonModelOutput";
import { ConversationHistoryMetadataCommonModel } from "./ConversationHistoryMetadataCommonModel";
import { ConversationHistoryAnalysisCommonModel } from "./ConversationHistoryAnalysisCommonModel";
import { ConversationInitiationClientDataRequestOutput } from "./ConversationInitiationClientDataRequestOutput";

export const GetConversationResponseModel: core.serialization.ObjectSchema<
    serializers.GetConversationResponseModel.Raw,
    ElevenLabs.GetConversationResponseModel
> = core.serialization.object({
    agentId: core.serialization.property("agent_id", core.serialization.string()),
    conversationId: core.serialization.property("conversation_id", core.serialization.string()),
    status: GetConversationResponseModelStatus,
    userId: core.serialization.property("user_id", core.serialization.string().optional()),
    transcript: core.serialization.list(ConversationHistoryTranscriptCommonModelOutput),
    metadata: ConversationHistoryMetadataCommonModel,
    analysis: ConversationHistoryAnalysisCommonModel.optional(),
    conversationInitiationClientData: core.serialization.property(
        "conversation_initiation_client_data",
        ConversationInitiationClientDataRequestOutput.optional(),
    ),
    hasAudio: core.serialization.property("has_audio", core.serialization.boolean()),
    hasUserAudio: core.serialization.property("has_user_audio", core.serialization.boolean()),
    hasResponseAudio: core.serialization.property("has_response_audio", core.serialization.boolean()),
});

export declare namespace GetConversationResponseModel {
    export interface Raw {
        agent_id: string;
        conversation_id: string;
        status: GetConversationResponseModelStatus.Raw;
        user_id?: string | null;
        transcript: ConversationHistoryTranscriptCommonModelOutput.Raw[];
        metadata: ConversationHistoryMetadataCommonModel.Raw;
        analysis?: ConversationHistoryAnalysisCommonModel.Raw | null;
        conversation_initiation_client_data?: ConversationInitiationClientDataRequestOutput.Raw | null;
        has_audio: boolean;
        has_user_audio: boolean;
        has_response_audio: boolean;
    }
}
