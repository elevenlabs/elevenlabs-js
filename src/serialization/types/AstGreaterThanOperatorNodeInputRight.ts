// This file was auto-generated by Fern from our API Definition.

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { AstBooleanNodeInput } from "./AstBooleanNodeInput";
import { AstDynamicVariableNodeInput } from "./AstDynamicVariableNodeInput";
import { AstllmNodeInput } from "./AstllmNodeInput";
import { AstNumberNodeInput } from "./AstNumberNodeInput";
import { AstStringNodeInput } from "./AstStringNodeInput";

export const AstGreaterThanOperatorNodeInputRight: core.serialization.Schema<
    serializers.AstGreaterThanOperatorNodeInputRight.Raw,
    ElevenLabs.AstGreaterThanOperatorNodeInputRight
> = core.serialization
    .union("type", {
        and_operator: core.serialization.lazyObject(() => serializers.AstAndOperatorNodeInput),
        boolean_literal: AstBooleanNodeInput,
        dynamic_variable: AstDynamicVariableNodeInput,
        eq_operator: core.serialization.lazyObject(() => serializers.AstEqualsOperatorNodeInput),
        gt_operator: core.serialization.lazyObject(() => serializers.AstGreaterThanOperatorNodeInput),
        gte_operator: core.serialization.lazyObject(() => serializers.AstGreaterThanOrEqualsOperatorNodeInput),
        llm: AstllmNodeInput,
        lt_operator: core.serialization.lazyObject(() => serializers.AstLessThanOperatorNodeInput),
        lte_operator: core.serialization.lazyObject(() => serializers.AstLessThanOrEqualsOperatorNodeInput),
        neq_operator: core.serialization.lazyObject(() => serializers.AstNotEqualsOperatorNodeInput),
        number_literal: AstNumberNodeInput,
        or_operator: core.serialization.lazyObject(() => serializers.AstOrOperatorNodeInput),
        string_literal: AstStringNodeInput,
    })
    .transform<ElevenLabs.AstGreaterThanOperatorNodeInputRight>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace AstGreaterThanOperatorNodeInputRight {
    export type Raw =
        | AstGreaterThanOperatorNodeInputRight.AndOperator
        | AstGreaterThanOperatorNodeInputRight.BooleanLiteral
        | AstGreaterThanOperatorNodeInputRight.DynamicVariable
        | AstGreaterThanOperatorNodeInputRight.EqOperator
        | AstGreaterThanOperatorNodeInputRight.GtOperator
        | AstGreaterThanOperatorNodeInputRight.GteOperator
        | AstGreaterThanOperatorNodeInputRight.Llm
        | AstGreaterThanOperatorNodeInputRight.LtOperator
        | AstGreaterThanOperatorNodeInputRight.LteOperator
        | AstGreaterThanOperatorNodeInputRight.NeqOperator
        | AstGreaterThanOperatorNodeInputRight.NumberLiteral
        | AstGreaterThanOperatorNodeInputRight.OrOperator
        | AstGreaterThanOperatorNodeInputRight.StringLiteral;

    export interface AndOperator extends serializers.AstAndOperatorNodeInput.Raw {
        type: "and_operator";
    }

    export interface BooleanLiteral extends AstBooleanNodeInput.Raw {
        type: "boolean_literal";
    }

    export interface DynamicVariable extends AstDynamicVariableNodeInput.Raw {
        type: "dynamic_variable";
    }

    export interface EqOperator extends serializers.AstEqualsOperatorNodeInput.Raw {
        type: "eq_operator";
    }

    export interface GtOperator extends serializers.AstGreaterThanOperatorNodeInput.Raw {
        type: "gt_operator";
    }

    export interface GteOperator extends serializers.AstGreaterThanOrEqualsOperatorNodeInput.Raw {
        type: "gte_operator";
    }

    export interface Llm extends AstllmNodeInput.Raw {
        type: "llm";
    }

    export interface LtOperator extends serializers.AstLessThanOperatorNodeInput.Raw {
        type: "lt_operator";
    }

    export interface LteOperator extends serializers.AstLessThanOrEqualsOperatorNodeInput.Raw {
        type: "lte_operator";
    }

    export interface NeqOperator extends serializers.AstNotEqualsOperatorNodeInput.Raw {
        type: "neq_operator";
    }

    export interface NumberLiteral extends AstNumberNodeInput.Raw {
        type: "number_literal";
    }

    export interface OrOperator extends serializers.AstOrOperatorNodeInput.Raw {
        type: "or_operator";
    }

    export interface StringLiteral extends AstStringNodeInput.Raw {
        type: "string_literal";
    }
}
