/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { WorkflowLlmConditionModel } from "./WorkflowLlmConditionModel";
import { WorkflowResultConditionModel } from "./WorkflowResultConditionModel";
import { WorkflowUnconditionalModel } from "./WorkflowUnconditionalModel";

export const WorkflowEdgeModelForwardCondition: core.serialization.Schema<
    serializers.WorkflowEdgeModelForwardCondition.Raw,
    ElevenLabs.WorkflowEdgeModelForwardCondition
> = core.serialization
    .union("type", {
        llm: WorkflowLlmConditionModel,
        result: WorkflowResultConditionModel,
        unconditional: WorkflowUnconditionalModel,
    })
    .transform<ElevenLabs.WorkflowEdgeModelForwardCondition>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowEdgeModelForwardCondition {
    export type Raw =
        | WorkflowEdgeModelForwardCondition.Llm
        | WorkflowEdgeModelForwardCondition.Result
        | WorkflowEdgeModelForwardCondition.Unconditional;

    export interface Llm extends WorkflowLlmConditionModel.Raw {
        type: "llm";
    }

    export interface Result extends WorkflowResultConditionModel.Raw {
        type: "result";
    }

    export interface Unconditional extends WorkflowUnconditionalModel.Raw {
        type: "unconditional";
    }
}
