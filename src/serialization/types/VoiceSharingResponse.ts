// This file was auto-generated by Fern from our API Definition.

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { VoiceSharingState } from "./VoiceSharingState";
import { VoiceSharingResponseModelCategory } from "./VoiceSharingResponseModelCategory";
import { ReviewStatus } from "./ReviewStatus";
import { VoiceSharingModerationCheckResponseModel } from "./VoiceSharingModerationCheckResponseModel";
import { ReaderResourceResponseModel } from "./ReaderResourceResponseModel";

export const VoiceSharingResponse: core.serialization.ObjectSchema<
    serializers.VoiceSharingResponse.Raw,
    ElevenLabs.VoiceSharingResponse
> = core.serialization.object({
    status: VoiceSharingState.optional(),
    historyItemSampleId: core.serialization.property("history_item_sample_id", core.serialization.string().optional()),
    dateUnix: core.serialization.property("date_unix", core.serialization.number().optional()),
    whitelistedEmails: core.serialization.property(
        "whitelisted_emails",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    publicOwnerId: core.serialization.property("public_owner_id", core.serialization.string().optional()),
    originalVoiceId: core.serialization.property("original_voice_id", core.serialization.string().optional()),
    financialRewardsEnabled: core.serialization.property(
        "financial_rewards_enabled",
        core.serialization.boolean().optional(),
    ),
    freeUsersAllowed: core.serialization.property("free_users_allowed", core.serialization.boolean().optional()),
    liveModerationEnabled: core.serialization.property(
        "live_moderation_enabled",
        core.serialization.boolean().optional(),
    ),
    rate: core.serialization.number().optional(),
    fiatRate: core.serialization.property("fiat_rate", core.serialization.number().optional()),
    noticePeriod: core.serialization.property("notice_period", core.serialization.number().optional()),
    disableAtUnix: core.serialization.property("disable_at_unix", core.serialization.number().optional()),
    voiceMixingAllowed: core.serialization.property("voice_mixing_allowed", core.serialization.boolean().optional()),
    featured: core.serialization.boolean().optional(),
    category: VoiceSharingResponseModelCategory.optional(),
    readerAppEnabled: core.serialization.property("reader_app_enabled", core.serialization.boolean().optional()),
    imageUrl: core.serialization.property("image_url", core.serialization.string().optional()),
    banReason: core.serialization.property("ban_reason", core.serialization.string().optional()),
    likedByCount: core.serialization.property("liked_by_count", core.serialization.number().optional()),
    clonedByCount: core.serialization.property("cloned_by_count", core.serialization.number().optional()),
    name: core.serialization.string().optional(),
    description: core.serialization.string().optional(),
    labels: core.serialization.record(core.serialization.string(), core.serialization.string()).optional(),
    reviewStatus: core.serialization.property("review_status", ReviewStatus.optional()),
    reviewMessage: core.serialization.property("review_message", core.serialization.string().optional()),
    enabledInLibrary: core.serialization.property("enabled_in_library", core.serialization.boolean().optional()),
    instagramUsername: core.serialization.property("instagram_username", core.serialization.string().optional()),
    twitterUsername: core.serialization.property("twitter_username", core.serialization.string().optional()),
    youtubeUsername: core.serialization.property("youtube_username", core.serialization.string().optional()),
    tiktokUsername: core.serialization.property("tiktok_username", core.serialization.string().optional()),
    moderationCheck: core.serialization.property(
        "moderation_check",
        VoiceSharingModerationCheckResponseModel.optional(),
    ),
    readerRestrictedOn: core.serialization.property(
        "reader_restricted_on",
        core.serialization.list(ReaderResourceResponseModel).optional(),
    ),
});

export declare namespace VoiceSharingResponse {
    export interface Raw {
        status?: VoiceSharingState.Raw | null;
        history_item_sample_id?: string | null;
        date_unix?: number | null;
        whitelisted_emails?: string[] | null;
        public_owner_id?: string | null;
        original_voice_id?: string | null;
        financial_rewards_enabled?: boolean | null;
        free_users_allowed?: boolean | null;
        live_moderation_enabled?: boolean | null;
        rate?: number | null;
        fiat_rate?: number | null;
        notice_period?: number | null;
        disable_at_unix?: number | null;
        voice_mixing_allowed?: boolean | null;
        featured?: boolean | null;
        category?: VoiceSharingResponseModelCategory.Raw | null;
        reader_app_enabled?: boolean | null;
        image_url?: string | null;
        ban_reason?: string | null;
        liked_by_count?: number | null;
        cloned_by_count?: number | null;
        name?: string | null;
        description?: string | null;
        labels?: Record<string, string> | null;
        review_status?: ReviewStatus.Raw | null;
        review_message?: string | null;
        enabled_in_library?: boolean | null;
        instagram_username?: string | null;
        twitter_username?: string | null;
        youtube_username?: string | null;
        tiktok_username?: string | null;
        moderation_check?: VoiceSharingModerationCheckResponseModel.Raw | null;
        reader_restricted_on?: ReaderResourceResponseModel.Raw[] | null;
    }
}
