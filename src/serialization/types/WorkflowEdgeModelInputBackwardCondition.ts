// This file was auto-generated by Fern from our API Definition.

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { WorkflowExpressionConditionModelInput } from "./WorkflowExpressionConditionModelInput";
import { WorkflowLlmConditionModelInput } from "./WorkflowLlmConditionModelInput";
import { WorkflowResultConditionModelInput } from "./WorkflowResultConditionModelInput";
import { WorkflowUnconditionalModelInput } from "./WorkflowUnconditionalModelInput";

export const WorkflowEdgeModelInputBackwardCondition: core.serialization.Schema<
    serializers.WorkflowEdgeModelInputBackwardCondition.Raw,
    ElevenLabs.WorkflowEdgeModelInputBackwardCondition
> = core.serialization
    .union("type", {
        expression: WorkflowExpressionConditionModelInput,
        llm: WorkflowLlmConditionModelInput,
        result: WorkflowResultConditionModelInput,
        unconditional: WorkflowUnconditionalModelInput,
    })
    .transform<ElevenLabs.WorkflowEdgeModelInputBackwardCondition>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowEdgeModelInputBackwardCondition {
    export type Raw =
        | WorkflowEdgeModelInputBackwardCondition.Expression
        | WorkflowEdgeModelInputBackwardCondition.Llm
        | WorkflowEdgeModelInputBackwardCondition.Result
        | WorkflowEdgeModelInputBackwardCondition.Unconditional;

    export interface Expression extends WorkflowExpressionConditionModelInput.Raw {
        type: "expression";
    }

    export interface Llm extends WorkflowLlmConditionModelInput.Raw {
        type: "llm";
    }

    export interface Result extends WorkflowResultConditionModelInput.Raw {
        type: "result";
    }

    export interface Unconditional extends WorkflowUnconditionalModelInput.Raw {
        type: "unconditional";
    }
}
