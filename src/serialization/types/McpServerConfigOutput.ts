/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { McpApprovalPolicy } from "./McpApprovalPolicy";
import { McpToolApprovalHash } from "./McpToolApprovalHash";
import { McpServerTransport } from "./McpServerTransport";
import { McpServerConfigOutputUrl } from "./McpServerConfigOutputUrl";
import { McpServerConfigOutputSecretToken } from "./McpServerConfigOutputSecretToken";
import { McpServerConfigOutputRequestHeadersValue } from "./McpServerConfigOutputRequestHeadersValue";

export const McpServerConfigOutput: core.serialization.ObjectSchema<
    serializers.McpServerConfigOutput.Raw,
    ElevenLabs.McpServerConfigOutput
> = core.serialization.object({
    approvalPolicy: core.serialization.property("approval_policy", McpApprovalPolicy.optional()),
    toolApprovalHashes: core.serialization.property(
        "tool_approval_hashes",
        core.serialization.list(McpToolApprovalHash).optional(),
    ),
    transport: McpServerTransport.optional(),
    url: McpServerConfigOutputUrl,
    secretToken: core.serialization.property("secret_token", McpServerConfigOutputSecretToken.optional()),
    requestHeaders: core.serialization.property(
        "request_headers",
        core.serialization.record(core.serialization.string(), McpServerConfigOutputRequestHeadersValue).optional(),
    ),
    name: core.serialization.string(),
    description: core.serialization.string().optional(),
    forcePreToolSpeech: core.serialization.property("force_pre_tool_speech", core.serialization.boolean().optional()),
    disableInterruptions: core.serialization.property("disable_interruptions", core.serialization.boolean().optional()),
});

export declare namespace McpServerConfigOutput {
    export interface Raw {
        approval_policy?: McpApprovalPolicy.Raw | null;
        tool_approval_hashes?: McpToolApprovalHash.Raw[] | null;
        transport?: McpServerTransport.Raw | null;
        url: McpServerConfigOutputUrl.Raw;
        secret_token?: McpServerConfigOutputSecretToken.Raw | null;
        request_headers?: Record<string, McpServerConfigOutputRequestHeadersValue.Raw> | null;
        name: string;
        description?: string | null;
        force_pre_tool_speech?: boolean | null;
        disable_interruptions?: boolean | null;
    }
}
