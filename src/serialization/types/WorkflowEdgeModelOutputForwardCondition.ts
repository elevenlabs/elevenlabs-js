// This file was auto-generated by Fern from our API Definition.

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { WorkflowExpressionConditionModelOutput } from "./WorkflowExpressionConditionModelOutput";
import { WorkflowLlmConditionModelOutput } from "./WorkflowLlmConditionModelOutput";
import { WorkflowResultConditionModelOutput } from "./WorkflowResultConditionModelOutput";
import { WorkflowUnconditionalModelOutput } from "./WorkflowUnconditionalModelOutput";

export const WorkflowEdgeModelOutputForwardCondition: core.serialization.Schema<
    serializers.WorkflowEdgeModelOutputForwardCondition.Raw,
    ElevenLabs.WorkflowEdgeModelOutputForwardCondition
> = core.serialization
    .union("type", {
        expression: WorkflowExpressionConditionModelOutput,
        llm: WorkflowLlmConditionModelOutput,
        result: WorkflowResultConditionModelOutput,
        unconditional: WorkflowUnconditionalModelOutput,
    })
    .transform<ElevenLabs.WorkflowEdgeModelOutputForwardCondition>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorkflowEdgeModelOutputForwardCondition {
    export type Raw =
        | WorkflowEdgeModelOutputForwardCondition.Expression
        | WorkflowEdgeModelOutputForwardCondition.Llm
        | WorkflowEdgeModelOutputForwardCondition.Result
        | WorkflowEdgeModelOutputForwardCondition.Unconditional;

    export interface Expression extends WorkflowExpressionConditionModelOutput.Raw {
        type: "expression";
    }

    export interface Llm extends WorkflowLlmConditionModelOutput.Raw {
        type: "llm";
    }

    export interface Result extends WorkflowResultConditionModelOutput.Raw {
        type: "result";
    }

    export interface Unconditional extends WorkflowUnconditionalModelOutput.Raw {
        type: "unconditional";
    }
}
