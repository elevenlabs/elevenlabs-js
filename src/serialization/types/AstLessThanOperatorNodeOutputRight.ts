// This file was auto-generated by Fern from our API Definition.

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { AstBooleanNodeOutput } from "./AstBooleanNodeOutput";
import { AstDynamicVariableNodeOutput } from "./AstDynamicVariableNodeOutput";
import { AstllmNodeOutput } from "./AstllmNodeOutput";
import { AstNumberNodeOutput } from "./AstNumberNodeOutput";
import { AstStringNodeOutput } from "./AstStringNodeOutput";

export const AstLessThanOperatorNodeOutputRight: core.serialization.Schema<
    serializers.AstLessThanOperatorNodeOutputRight.Raw,
    ElevenLabs.AstLessThanOperatorNodeOutputRight
> = core.serialization
    .union("type", {
        and_operator: core.serialization.lazyObject(() => serializers.AstAndOperatorNodeOutput),
        boolean_literal: AstBooleanNodeOutput,
        dynamic_variable: AstDynamicVariableNodeOutput,
        eq_operator: core.serialization.lazyObject(() => serializers.AstEqualsOperatorNodeOutput),
        gt_operator: core.serialization.lazyObject(() => serializers.AstGreaterThanOperatorNodeOutput),
        gte_operator: core.serialization.lazyObject(() => serializers.AstGreaterThanOrEqualsOperatorNodeOutput),
        llm: AstllmNodeOutput,
        lt_operator: core.serialization.lazyObject(() => serializers.AstLessThanOperatorNodeOutput),
        lte_operator: core.serialization.lazyObject(() => serializers.AstLessThanOrEqualsOperatorNodeOutput),
        neq_operator: core.serialization.lazyObject(() => serializers.AstNotEqualsOperatorNodeOutput),
        number_literal: AstNumberNodeOutput,
        or_operator: core.serialization.lazyObject(() => serializers.AstOrOperatorNodeOutput),
        string_literal: AstStringNodeOutput,
    })
    .transform<ElevenLabs.AstLessThanOperatorNodeOutputRight>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace AstLessThanOperatorNodeOutputRight {
    export type Raw =
        | AstLessThanOperatorNodeOutputRight.AndOperator
        | AstLessThanOperatorNodeOutputRight.BooleanLiteral
        | AstLessThanOperatorNodeOutputRight.DynamicVariable
        | AstLessThanOperatorNodeOutputRight.EqOperator
        | AstLessThanOperatorNodeOutputRight.GtOperator
        | AstLessThanOperatorNodeOutputRight.GteOperator
        | AstLessThanOperatorNodeOutputRight.Llm
        | AstLessThanOperatorNodeOutputRight.LtOperator
        | AstLessThanOperatorNodeOutputRight.LteOperator
        | AstLessThanOperatorNodeOutputRight.NeqOperator
        | AstLessThanOperatorNodeOutputRight.NumberLiteral
        | AstLessThanOperatorNodeOutputRight.OrOperator
        | AstLessThanOperatorNodeOutputRight.StringLiteral;

    export interface AndOperator extends serializers.AstAndOperatorNodeOutput.Raw {
        type: "and_operator";
    }

    export interface BooleanLiteral extends AstBooleanNodeOutput.Raw {
        type: "boolean_literal";
    }

    export interface DynamicVariable extends AstDynamicVariableNodeOutput.Raw {
        type: "dynamic_variable";
    }

    export interface EqOperator extends serializers.AstEqualsOperatorNodeOutput.Raw {
        type: "eq_operator";
    }

    export interface GtOperator extends serializers.AstGreaterThanOperatorNodeOutput.Raw {
        type: "gt_operator";
    }

    export interface GteOperator extends serializers.AstGreaterThanOrEqualsOperatorNodeOutput.Raw {
        type: "gte_operator";
    }

    export interface Llm extends AstllmNodeOutput.Raw {
        type: "llm";
    }

    export interface LtOperator extends serializers.AstLessThanOperatorNodeOutput.Raw {
        type: "lt_operator";
    }

    export interface LteOperator extends serializers.AstLessThanOrEqualsOperatorNodeOutput.Raw {
        type: "lte_operator";
    }

    export interface NeqOperator extends serializers.AstNotEqualsOperatorNodeOutput.Raw {
        type: "neq_operator";
    }

    export interface NumberLiteral extends AstNumberNodeOutput.Raw {
        type: "number_literal";
    }

    export interface OrOperator extends serializers.AstOrOperatorNodeOutput.Raw {
        type: "or_operator";
    }

    export interface StringLiteral extends AstStringNodeOutput.Raw {
        type: "string_literal";
    }
}
