/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as ElevenLabs from "../../api/index";
import * as core from "../../core";
import { AstBooleanNode } from "./AstBooleanNode";
import { AstDynamicVariableNode } from "./AstDynamicVariableNode";
import { AstllmNode } from "./AstllmNode";
import { AstNumberNode } from "./AstNumberNode";
import { AstStringNode } from "./AstStringNode";

export const AstNotEqualsOperatorNodeLeft: core.serialization.Schema<
    serializers.AstNotEqualsOperatorNodeLeft.Raw,
    ElevenLabs.AstNotEqualsOperatorNodeLeft
> = core.serialization
    .union("type", {
        and_operator: core.serialization.lazyObject(() => serializers.AstAndOperatorNode),
        boolean_literal: AstBooleanNode,
        dynamic_variable: AstDynamicVariableNode,
        eq_operator: core.serialization.lazyObject(() => serializers.AstEqualsOperatorNode),
        gt_operator: core.serialization.lazyObject(() => serializers.AstGreaterThanOperatorNode),
        gte_operator: core.serialization.lazyObject(() => serializers.AstGreaterThanOrEqualsOperatorNode),
        llm: AstllmNode,
        lt_operator: core.serialization.lazyObject(() => serializers.AstLessThanOperatorNode),
        lte_operator: core.serialization.lazyObject(() => serializers.AstLessThanOrEqualsOperatorNode),
        neq_operator: core.serialization.lazyObject(() => serializers.AstNotEqualsOperatorNode),
        number_literal: AstNumberNode,
        or_operator: core.serialization.lazyObject(() => serializers.AstOrOperatorNode),
        string_literal: AstStringNode,
    })
    .transform<ElevenLabs.AstNotEqualsOperatorNodeLeft>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace AstNotEqualsOperatorNodeLeft {
    export type Raw =
        | AstNotEqualsOperatorNodeLeft.AndOperator
        | AstNotEqualsOperatorNodeLeft.BooleanLiteral
        | AstNotEqualsOperatorNodeLeft.DynamicVariable
        | AstNotEqualsOperatorNodeLeft.EqOperator
        | AstNotEqualsOperatorNodeLeft.GtOperator
        | AstNotEqualsOperatorNodeLeft.GteOperator
        | AstNotEqualsOperatorNodeLeft.Llm
        | AstNotEqualsOperatorNodeLeft.LtOperator
        | AstNotEqualsOperatorNodeLeft.LteOperator
        | AstNotEqualsOperatorNodeLeft.NeqOperator
        | AstNotEqualsOperatorNodeLeft.NumberLiteral
        | AstNotEqualsOperatorNodeLeft.OrOperator
        | AstNotEqualsOperatorNodeLeft.StringLiteral;

    export interface AndOperator extends serializers.AstAndOperatorNode.Raw {
        type: "and_operator";
    }

    export interface BooleanLiteral extends AstBooleanNode.Raw {
        type: "boolean_literal";
    }

    export interface DynamicVariable extends AstDynamicVariableNode.Raw {
        type: "dynamic_variable";
    }

    export interface EqOperator extends serializers.AstEqualsOperatorNode.Raw {
        type: "eq_operator";
    }

    export interface GtOperator extends serializers.AstGreaterThanOperatorNode.Raw {
        type: "gt_operator";
    }

    export interface GteOperator extends serializers.AstGreaterThanOrEqualsOperatorNode.Raw {
        type: "gte_operator";
    }

    export interface Llm extends AstllmNode.Raw {
        type: "llm";
    }

    export interface LtOperator extends serializers.AstLessThanOperatorNode.Raw {
        type: "lt_operator";
    }

    export interface LteOperator extends serializers.AstLessThanOrEqualsOperatorNode.Raw {
        type: "lte_operator";
    }

    export interface NeqOperator extends serializers.AstNotEqualsOperatorNode.Raw {
        type: "neq_operator";
    }

    export interface NumberLiteral extends AstNumberNode.Raw {
        type: "number_literal";
    }

    export interface OrOperator extends serializers.AstOrOperatorNode.Raw {
        type: "or_operator";
    }

    export interface StringLiteral extends AstStringNode.Raw {
        type: "string_literal";
    }
}
