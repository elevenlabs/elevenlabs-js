/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
import * as serializers from "../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as errors from "../../../../errors/index";

export declare namespace Usage {
    export interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Usage {
    protected readonly _options: Usage.Options;

    constructor(_options: Usage.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns the usage metrics for the current user or the entire workspace they are part of. The response provides a time axis based on the specified aggregation interval (default: day), with usage values for each interval along that axis. Usage is broken down by the selected breakdown type. For example, breakdown type "voice" will return the usage of each voice for each interval along the time axis.
     *
     * @param {ElevenLabs.UsageGetRequest} request
     * @param {Usage.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.usage.get({
     *         startUnix: 1,
     *         endUnix: 1,
     *         includeWorkspaceMetrics: true,
     *         breakdownType: "none",
     *         aggregationInterval: "hour",
     *         aggregationBucketSize: 1,
     *         metric: "credits"
     *     })
     */
    public get(
        request: ElevenLabs.UsageGetRequest,
        requestOptions?: Usage.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.UsageCharactersResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: ElevenLabs.UsageGetRequest,
        requestOptions?: Usage.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.UsageCharactersResponseModel>> {
        const {
            startUnix,
            endUnix,
            includeWorkspaceMetrics,
            breakdownType,
            aggregationInterval,
            aggregationBucketSize,
            metric,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["start_unix"] = startUnix.toString();
        _queryParams["end_unix"] = endUnix.toString();
        if (includeWorkspaceMetrics != null) {
            _queryParams["include_workspace_metrics"] = includeWorkspaceMetrics.toString();
        }

        if (breakdownType != null) {
            _queryParams["breakdown_type"] = serializers.BreakdownTypes.jsonOrThrow(breakdownType, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (aggregationInterval != null) {
            _queryParams["aggregation_interval"] = serializers.UsageAggregationInterval.jsonOrThrow(
                aggregationInterval,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        if (aggregationBucketSize != null) {
            _queryParams["aggregation_bucket_size"] = aggregationBucketSize.toString();
        }

        if (metric != null) {
            _queryParams["metric"] = serializers.MetricType.jsonOrThrow(metric, { unrecognizedObjectKeys: "strip" });
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElevenLabsEnvironment.Production,
                "v1/usage/character-stats",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ "xi-api-key": requestOptions?.apiKey }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.UsageCharactersResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling GET /v1/usage/character-stats.");
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
