/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";
import { Conversations } from "../resources/conversations/client/Client";
import { Twilio } from "../resources/twilio/client/Client";
import { Agents } from "../resources/agents/client/Client";
import { PhoneNumbers } from "../resources/phoneNumbers/client/Client";
import { LlmUsage } from "../resources/llmUsage/client/Client";
import { KnowledgeBase } from "../resources/knowledgeBase/client/Client";
import { Tools } from "../resources/tools/client/Client";
import { Settings } from "../resources/settings/client/Client";
import { Secrets } from "../resources/secrets/client/Client";
import { BatchCalls } from "../resources/batchCalls/client/Client";
import { SipTrunk } from "../resources/sipTrunk/client/Client";
import { McpServers } from "../resources/mcpServers/client/Client";
import { Dashboard } from "../resources/dashboard/client/Client";

export declare namespace ConversationalAi {
    export interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class ConversationalAi {
    protected readonly _options: ConversationalAi.Options;
    protected _conversations: Conversations | undefined;
    protected _twilio: Twilio | undefined;
    protected _agents: Agents | undefined;
    protected _phoneNumbers: PhoneNumbers | undefined;
    protected _llmUsage: LlmUsage | undefined;
    protected _knowledgeBase: KnowledgeBase | undefined;
    protected _tools: Tools | undefined;
    protected _settings: Settings | undefined;
    protected _secrets: Secrets | undefined;
    protected _batchCalls: BatchCalls | undefined;
    protected _sipTrunk: SipTrunk | undefined;
    protected _mcpServers: McpServers | undefined;
    protected _dashboard: Dashboard | undefined;

    constructor(_options: ConversationalAi.Options = {}) {
        this._options = _options;
    }

    public get conversations(): Conversations {
        return (this._conversations ??= new Conversations(this._options));
    }

    public get twilio(): Twilio {
        return (this._twilio ??= new Twilio(this._options));
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get phoneNumbers(): PhoneNumbers {
        return (this._phoneNumbers ??= new PhoneNumbers(this._options));
    }

    public get llmUsage(): LlmUsage {
        return (this._llmUsage ??= new LlmUsage(this._options));
    }

    public get knowledgeBase(): KnowledgeBase {
        return (this._knowledgeBase ??= new KnowledgeBase(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }

    public get settings(): Settings {
        return (this._settings ??= new Settings(this._options));
    }

    public get secrets(): Secrets {
        return (this._secrets ??= new Secrets(this._options));
    }

    public get batchCalls(): BatchCalls {
        return (this._batchCalls ??= new BatchCalls(this._options));
    }

    public get sipTrunk(): SipTrunk {
        return (this._sipTrunk ??= new SipTrunk(this._options));
    }

    public get mcpServers(): McpServers {
        return (this._mcpServers ??= new McpServers(this._options));
    }

    public get dashboard(): Dashboard {
        return (this._dashboard ??= new Dashboard(this._options));
    }

    /**
     * Upload a file or webpage URL to create a knowledge base document. <br> <Note> After creating the document, update the agent's knowledge base by calling [Update agent](/docs/api-reference/agents/update). </Note>
     *
     * @param {ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.addToKnowledgeBase({})
     */
    public addToKnowledgeBase(
        request: ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost,
        requestOptions?: ConversationalAi.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.AddKnowledgeBaseResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__addToKnowledgeBase(request, requestOptions));
    }

    private async __addToKnowledgeBase(
        request: ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost,
        requestOptions?: ConversationalAi.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.AddKnowledgeBaseResponseModel>> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (request.agentId != null) {
            _queryParams["agent_id"] = request.agentId;
        }

        const _request = await core.newFormData();
        if (request.name != null) {
            _request.append("name", request.name);
        }

        if (request.url != null) {
            _request.append("url", request.url);
        }

        if (request.file != null) {
            await _request.appendFile("file", request.file);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElevenLabsEnvironment.Production,
                "v1/convai/knowledge-base",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ "xi-api-key": requestOptions?.apiKey, ..._maybeEncodedRequest.headers }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.AddKnowledgeBaseResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling POST /v1/convai/knowledge-base.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Provides information about all RAG indexes of the specified knowledgebase document.
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.getDocumentRagIndexes("21m00Tcm4TlvDq8ikWAM")
     */
    public getDocumentRagIndexes(
        documentationId: string,
        requestOptions?: ConversationalAi.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.RagDocumentIndexesResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__getDocumentRagIndexes(documentationId, requestOptions));
    }

    private async __getDocumentRagIndexes(
        documentationId: string,
        requestOptions?: ConversationalAi.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.RagDocumentIndexesResponseModel>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElevenLabsEnvironment.Production,
                `v1/convai/knowledge-base/${encodeURIComponent(documentationId)}/rag-index`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ "xi-api-key": requestOptions?.apiKey }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.RagDocumentIndexesResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling GET /v1/convai/knowledge-base/{documentation_id}/rag-index.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete RAG index for the knowledgebase document.
     *
     * @param {string} documentationId - The id of a document from the knowledge base. This is returned on document addition.
     * @param {string} ragIndexId - The id of RAG index of document from the knowledge base.
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.deleteDocumentRagIndex("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM")
     */
    public deleteDocumentRagIndex(
        documentationId: string,
        ragIndexId: string,
        requestOptions?: ConversationalAi.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.RagDocumentIndexResponseModel> {
        return core.HttpResponsePromise.fromPromise(
            this.__deleteDocumentRagIndex(documentationId, ragIndexId, requestOptions),
        );
    }

    private async __deleteDocumentRagIndex(
        documentationId: string,
        ragIndexId: string,
        requestOptions?: ConversationalAi.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.RagDocumentIndexResponseModel>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElevenLabsEnvironment.Production,
                `v1/convai/knowledge-base/${encodeURIComponent(documentationId)}/rag-index/${encodeURIComponent(ragIndexId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ "xi-api-key": requestOptions?.apiKey }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.RagDocumentIndexResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling DELETE /v1/convai/knowledge-base/{documentation_id}/rag-index/{rag_index_id}.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Provides total size and other information of RAG indexes used by knowledgebase documents
     *
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.ragIndexOverview()
     */
    public ragIndexOverview(
        requestOptions?: ConversationalAi.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.RagIndexOverviewResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__ragIndexOverview(requestOptions));
    }

    private async __ragIndexOverview(
        requestOptions?: ConversationalAi.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.RagIndexOverviewResponseModel>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElevenLabsEnvironment.Production,
                "v1/convai/knowledge-base/rag-index",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ "xi-api-key": requestOptions?.apiKey }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.RagIndexOverviewResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling GET /v1/convai/knowledge-base/rag-index.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update an existing secret for the workspace
     *
     * @param {string} secretId
     * @param {ElevenLabs.PatchWorkspaceSecretRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.updateSecret("secret_id", {
     *         name: "name",
     *         value: "value"
     *     })
     */
    public updateSecret(
        secretId: string,
        request: ElevenLabs.PatchWorkspaceSecretRequest,
        requestOptions?: ConversationalAi.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.PostWorkspaceSecretResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__updateSecret(secretId, request, requestOptions));
    }

    private async __updateSecret(
        secretId: string,
        request: ElevenLabs.PatchWorkspaceSecretRequest,
        requestOptions?: ConversationalAi.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.PostWorkspaceSecretResponseModel>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElevenLabsEnvironment.Production,
                `v1/convai/secrets/${encodeURIComponent(secretId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ "xi-api-key": requestOptions?.apiKey }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: {
                ...serializers.PatchWorkspaceSecretRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
                type: "update",
            },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.PostWorkspaceSecretResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling PATCH /v1/convai/secrets/{secret_id}.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
