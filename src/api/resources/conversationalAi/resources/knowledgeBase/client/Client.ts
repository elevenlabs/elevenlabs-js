// This file was auto-generated by Fern from our API Definition.

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
import * as serializers from "../../../../../../serialization/index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as errors from "../../../../../../errors/index";
import { Documents } from "../resources/documents/client/Client";
import { Document } from "../resources/document/client/Client";

export declare namespace KnowledgeBase {
    export interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class KnowledgeBase {
    protected readonly _options: KnowledgeBase.Options;
    protected _documents: Documents | undefined;
    protected _document: Document | undefined;

    constructor(_options: KnowledgeBase.Options = {}) {
        this._options = _options;
    }

    public get documents(): Documents {
        return (this._documents ??= new Documents(this._options));
    }

    public get document(): Document {
        return (this._document ??= new Document(this._options));
    }

    /**
     * Get a list of available knowledge base documents
     *
     * @param {ElevenLabs.conversationalAi.KnowledgeBaseListRequest} request
     * @param {KnowledgeBase.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.knowledgeBase.list({
     *         pageSize: 1,
     *         search: "search",
     *         showOnlyOwnedDocuments: true,
     *         sortDirection: "asc",
     *         sortBy: "name",
     *         useTypesense: true,
     *         cursor: "cursor"
     *     })
     */
    public list(
        request: ElevenLabs.conversationalAi.KnowledgeBaseListRequest = {},
        requestOptions?: KnowledgeBase.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.GetKnowledgeBaseListResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: ElevenLabs.conversationalAi.KnowledgeBaseListRequest = {},
        requestOptions?: KnowledgeBase.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.GetKnowledgeBaseListResponseModel>> {
        const { pageSize, search, showOnlyOwnedDocuments, types, sortDirection, sortBy, useTypesense, cursor } =
            request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (pageSize != null) {
            _queryParams["page_size"] = pageSize.toString();
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        if (showOnlyOwnedDocuments != null) {
            _queryParams["show_only_owned_documents"] = showOnlyOwnedDocuments.toString();
        }

        if (types != null) {
            if (Array.isArray(types)) {
                _queryParams["types"] = types.map((item) =>
                    serializers.KnowledgeBaseDocumentType.jsonOrThrow(item, { unrecognizedObjectKeys: "strip" }),
                );
            } else {
                _queryParams["types"] = serializers.KnowledgeBaseDocumentType.jsonOrThrow(types, {
                    unrecognizedObjectKeys: "strip",
                });
            }
        }

        if (sortDirection != null) {
            _queryParams["sort_direction"] = serializers.SortDirection.jsonOrThrow(sortDirection, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (sortBy != null) {
            _queryParams["sort_by"] = serializers.KnowledgeBaseSortBy.jsonOrThrow(sortBy, {
                unrecognizedObjectKeys: "strip",
            });
        }

        if (useTypesense != null) {
            _queryParams["use_typesense"] = useTypesense.toString();
        }

        if (cursor != null) {
            _queryParams["cursor"] = cursor;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ "xi-api-key": requestOptions?.apiKey ?? this._options?.apiKey }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ElevenLabsEnvironment.Production,
                "v1/convai/knowledge-base",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.GetKnowledgeBaseListResponseModel.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling GET /v1/convai/knowledge-base.");
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
