// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Subscription", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tier: "starter",
            character_count: 1000,
            character_limit: 10000,
            max_character_limit_extension: 10000,
            can_extend_character_limit: true,
            allowed_to_extend_character_limit: true,
            next_character_count_reset_unix: 1738356858,
            voice_slots_used: 1,
            professional_voice_slots_used: 0,
            voice_limit: 10,
            max_voice_add_edits: 1,
            voice_add_edit_counter: 0,
            professional_voice_limit: 1,
            can_extend_voice_limit: true,
            can_use_instant_voice_cloning: true,
            can_use_professional_voice_cloning: true,
            currency: "usd",
            status: "active",
            billing_period: "monthly_period",
            character_refresh_period: "monthly_period",
            next_invoice: {
                amount_due_cents: 1000,
                discount_percent_off: 1.1,
                discount_amount_off: 1.1,
                next_payment_attempt_unix: 1738356858,
                payment_intent_status: "processing",
            },
            open_invoices: [
                {
                    amount_due_cents: 1000,
                    discount_percent_off: 1.1,
                    discount_amount_off: 1.1,
                    next_payment_attempt_unix: 1738356858,
                    payment_intent_status: "processing",
                },
            ],
            has_open_invoices: true,
            pending_change: { kind: "change", next_tier: "free", timestamp_seconds: 1 },
        };
        server
            .mockEndpoint()
            .get("/v1/user/subscription")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.subscription.get();
        expect(response).toEqual({
            tier: "starter",
            characterCount: 1000,
            characterLimit: 10000,
            maxCharacterLimitExtension: 10000,
            canExtendCharacterLimit: true,
            allowedToExtendCharacterLimit: true,
            nextCharacterCountResetUnix: 1738356858,
            voiceSlotsUsed: 1,
            professionalVoiceSlotsUsed: 0,
            voiceLimit: 10,
            maxVoiceAddEdits: 1,
            voiceAddEditCounter: 0,
            professionalVoiceLimit: 1,
            canExtendVoiceLimit: true,
            canUseInstantVoiceCloning: true,
            canUseProfessionalVoiceCloning: true,
            currency: "usd",
            status: "active",
            billingPeriod: "monthly_period",
            characterRefreshPeriod: "monthly_period",
            nextInvoice: {
                amountDueCents: 1000,
                discountPercentOff: 1.1,
                discountAmountOff: 1.1,
                nextPaymentAttemptUnix: 1738356858,
                paymentIntentStatus: "processing",
            },
            openInvoices: [
                {
                    amountDueCents: 1000,
                    discountPercentOff: 1.1,
                    discountAmountOff: 1.1,
                    nextPaymentAttemptUnix: 1738356858,
                    paymentIntentStatus: "processing",
                },
            ],
            hasOpenInvoices: true,
            pendingChange: {
                kind: "change",
                nextTier: "free",
                timestampSeconds: 1,
            },
        });
    });
});
