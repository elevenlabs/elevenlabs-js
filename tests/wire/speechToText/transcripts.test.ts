/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Transcripts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            language_code: "en",
            language_probability: 0.98,
            text: "Hello world!",
            words: [
                {
                    text: "Hello",
                    start: 0,
                    end: 0.5,
                    type: "word",
                    speaker_id: "speaker_1",
                    logprob: -0.124,
                    characters: [{ text: "H", start: 0, end: 0.1 }],
                },
                {
                    text: " ",
                    start: 0.5,
                    end: 0.5,
                    type: "spacing",
                    speaker_id: "speaker_1",
                    logprob: 0,
                    characters: [{ text: "H", start: 0, end: 0.1 }],
                },
                {
                    text: "world!",
                    start: 0.5,
                    end: 1.2,
                    type: "word",
                    speaker_id: "speaker_1",
                    logprob: -0.089,
                    characters: [{ text: "H", start: 0, end: 0.1 }],
                },
            ],
            channel_index: 1,
            additional_formats: [
                {
                    requested_format: "requested_format",
                    file_extension: "file_extension",
                    content_type: "content_type",
                    is_base64_encoded: true,
                    content: "content",
                },
            ],
            transcription_id: "transcription_id",
        };
        server
            .mockEndpoint()
            .get("/v1/speech-to-text/transcripts/transcription_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.speechToText.transcripts.get("transcription_id");
        expect(response).toEqual({
            languageCode: "en",
            languageProbability: 0.98,
            text: "Hello world!",
            words: [
                {
                    text: "Hello",
                    start: 0,
                    end: 0.5,
                    type: "word",
                    speakerId: "speaker_1",
                    logprob: -0.124,
                    characters: [
                        {
                            text: "H",
                            start: 0,
                            end: 0.1,
                        },
                    ],
                },
                {
                    text: " ",
                    start: 0.5,
                    end: 0.5,
                    type: "spacing",
                    speakerId: "speaker_1",
                    logprob: 0,
                    characters: [
                        {
                            text: "H",
                            start: 0,
                            end: 0.1,
                        },
                    ],
                },
                {
                    text: "world!",
                    start: 0.5,
                    end: 1.2,
                    type: "word",
                    speakerId: "speaker_1",
                    logprob: -0.089,
                    characters: [
                        {
                            text: "H",
                            start: 0,
                            end: 0.1,
                        },
                    ],
                },
            ],
            channelIndex: 1,
            additionalFormats: [
                {
                    requestedFormat: "requested_format",
                    fileExtension: "file_extension",
                    contentType: "content_type",
                    isBase64Encoded: true,
                    content: "content",
                },
            ],
            transcriptionId: "transcription_id",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/speech-to-text/transcripts/transcription_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.speechToText.transcripts.delete("transcription_id");
        expect(response).toEqual({
            key: "value",
        });
    });
});
