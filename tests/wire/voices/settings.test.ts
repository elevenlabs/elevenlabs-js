// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Settings", () => {
    test("get_default", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { stability: 1, use_speaker_boost: true, similarity_boost: 1, style: 0, speed: 1 };
        server
            .mockEndpoint()
            .get("/v1/voices/settings/default")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.settings.getDefault();
        expect(response).toEqual({
            stability: 1,
            useSpeakerBoost: true,
            similarityBoost: 1,
            style: 0,
            speed: 1,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { stability: 1, use_speaker_boost: true, similarity_boost: 1, style: 0, speed: 1 };
        server
            .mockEndpoint()
            .get("/v1/voices/21m00Tcm4TlvDq8ikWAM/settings")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.settings.get("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            stability: 1,
            useSpeakerBoost: true,
            similarityBoost: 1,
            style: 0,
            speed: 1,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { stability: 1, use_speaker_boost: true, similarity_boost: 1, style: 0, speed: 1 };
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/voices/21m00Tcm4TlvDq8ikWAM/settings/edit")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.settings.update("21m00Tcm4TlvDq8ikWAM", {
            stability: 1,
            useSpeakerBoost: true,
            similarityBoost: 1,
            style: 0,
            speed: 1,
        });
        expect(response).toEqual({
            status: "ok",
        });
    });
});
