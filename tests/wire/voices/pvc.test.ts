// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Pvc", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "John Smith", language: "en" };
        const rawResponseBody = { voice_id: "b38kUX8pkfYO2kHyqfFy" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.create({
            name: "John Smith",
            language: "en",
        });
        expect(response).toEqual({
            voiceId: "b38kUX8pkfYO2kHyqfFy",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { voice_id: "b38kUX8pkfYO2kHyqfFy" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.update("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            voiceId: "b38kUX8pkfYO2kHyqfFy",
        });
    });

    test("train", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM/train")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.train("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            status: "ok",
        });
    });
});
