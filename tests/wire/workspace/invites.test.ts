// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Invites", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "john.doe@testmail.com" };
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/workspace/invites/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.invites.create({
            email: "john.doe@testmail.com",
        });
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("create_batch", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { emails: ["emails"] };
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/workspace/invites/add-bulk")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.invites.createBatch({
            emails: ["emails"],
        });
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "john.doe@testmail.com" };
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .delete("/v1/workspace/invites")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.invites.delete({
            email: "john.doe@testmail.com",
        });
        expect(response).toEqual({
            status: "ok",
        });
    });
});
