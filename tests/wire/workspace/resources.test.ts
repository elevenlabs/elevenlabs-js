/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Resources", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            resource_id: "4ZUqyldxf71HqUbcP2Lc",
            resource_type: "voice",
            creator_user_id: "5zavrE1kZXv2lFw9BKgEkf0B5Wqo",
            anonymous_access_level_override: "viewer",
            role_to_group_ids: {
                admin: ["5zavrE1kZXv2lFw9BKgEkf0B5Wqo"],
                editor: ["8ruQDGM2R4w1mFbHI5aROCUjIpJZ"],
                viewer: ["role_to_group_ids"],
            },
            share_options: [
                { name: "user@example.com", id: "i2YYI6huwBmcgYydAXARmQJc3pmX", type: "user" },
                { name: "mygroup", id: "x1AfvYKAmiqxCnbvZeNXHqqthJaC", type: "group" },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/workspace/resources/resource_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.resources.get("resource_id", {
            resourceType: "voice",
        });
        expect(response).toEqual({
            resourceId: "4ZUqyldxf71HqUbcP2Lc",
            resourceType: "voice",
            creatorUserId: "5zavrE1kZXv2lFw9BKgEkf0B5Wqo",
            anonymousAccessLevelOverride: "viewer",
            roleToGroupIds: {
                admin: ["5zavrE1kZXv2lFw9BKgEkf0B5Wqo"],
                editor: ["8ruQDGM2R4w1mFbHI5aROCUjIpJZ"],
                viewer: ["role_to_group_ids"],
            },
            shareOptions: [
                {
                    name: "user@example.com",
                    id: "i2YYI6huwBmcgYydAXARmQJc3pmX",
                    type: "user",
                },
                {
                    name: "mygroup",
                    id: "x1AfvYKAmiqxCnbvZeNXHqqthJaC",
                    type: "group",
                },
            ],
        });
    });

    test("share", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { role: "admin", resource_type: "voice" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/workspace/resources/resource_id/share")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.resources.share("resource_id", {
            role: "admin",
            resourceType: "voice",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("unshare", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { resource_type: "voice" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/workspace/resources/resource_id/unshare")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.resources.unshare("resource_id", {
            resourceType: "voice",
        });
        expect(response).toEqual({
            key: "value",
        });
    });
});
