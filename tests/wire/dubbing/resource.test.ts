/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Resource", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            version: 1,
            source_language: "source_language",
            target_languages: ["target_languages"],
            input: {
                src: "src",
                content_type: "content_type",
                bucket_name: "bucket_name",
                random_path_slug: "random_path_slug",
                duration_secs: 1.1,
                is_audio: true,
                url: "url",
            },
            background: {
                src: "src",
                content_type: "content_type",
                bucket_name: "bucket_name",
                random_path_slug: "random_path_slug",
                duration_secs: 1.1,
                is_audio: true,
                url: "url",
            },
            foreground: {
                src: "src",
                content_type: "content_type",
                bucket_name: "bucket_name",
                random_path_slug: "random_path_slug",
                duration_secs: 1.1,
                is_audio: true,
                url: "url",
            },
            speaker_tracks: {
                key: {
                    id: "id",
                    media_ref: {
                        src: "src",
                        content_type: "content_type",
                        bucket_name: "bucket_name",
                        random_path_slug: "random_path_slug",
                        duration_secs: 1.1,
                        is_audio: true,
                        url: "url",
                    },
                    speaker_name: "speaker_name",
                    voices: { key: "value" },
                    segments: ["segments"],
                },
            },
            speaker_segments: {
                key: {
                    id: "id",
                    start_time: 1.1,
                    end_time: 1.1,
                    text: "text",
                    subtitles: [{ start_time: 1.1, end_time: 1.1, lines: ["lines"] }],
                    dubs: {
                        key: {
                            start_time: 1.1,
                            end_time: 1.1,
                            subtitles: [{ start_time: 1.1, end_time: 1.1, lines: ["lines"] }],
                            audio_stale: true,
                        },
                    },
                },
            },
            renders: {
                key: {
                    id: "id",
                    version: 1,
                    language: "language",
                    type: "mp4",
                    media_ref: {
                        src: "src",
                        content_type: "content_type",
                        bucket_name: "bucket_name",
                        random_path_slug: "random_path_slug",
                        duration_secs: 1.1,
                        is_audio: true,
                        url: "url",
                    },
                    status: "complete",
                },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/dubbing/resource/dubbing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.resource.get("dubbing_id");
        expect(response).toEqual({
            id: "id",
            version: 1,
            sourceLanguage: "source_language",
            targetLanguages: ["target_languages"],
            input: {
                src: "src",
                contentType: "content_type",
                bucketName: "bucket_name",
                randomPathSlug: "random_path_slug",
                durationSecs: 1.1,
                isAudio: true,
                url: "url",
            },
            background: {
                src: "src",
                contentType: "content_type",
                bucketName: "bucket_name",
                randomPathSlug: "random_path_slug",
                durationSecs: 1.1,
                isAudio: true,
                url: "url",
            },
            foreground: {
                src: "src",
                contentType: "content_type",
                bucketName: "bucket_name",
                randomPathSlug: "random_path_slug",
                durationSecs: 1.1,
                isAudio: true,
                url: "url",
            },
            speakerTracks: {
                key: {
                    id: "id",
                    mediaRef: {
                        src: "src",
                        contentType: "content_type",
                        bucketName: "bucket_name",
                        randomPathSlug: "random_path_slug",
                        durationSecs: 1.1,
                        isAudio: true,
                        url: "url",
                    },
                    speakerName: "speaker_name",
                    voices: {
                        key: "value",
                    },
                    segments: ["segments"],
                },
            },
            speakerSegments: {
                key: {
                    id: "id",
                    startTime: 1.1,
                    endTime: 1.1,
                    text: "text",
                    subtitles: [
                        {
                            startTime: 1.1,
                            endTime: 1.1,
                            lines: ["lines"],
                        },
                    ],
                    dubs: {
                        key: {
                            startTime: 1.1,
                            endTime: 1.1,
                            subtitles: [
                                {
                                    startTime: 1.1,
                                    endTime: 1.1,
                                    lines: ["lines"],
                                },
                            ],
                            audioStale: true,
                        },
                    },
                },
            },
            renders: {
                key: {
                    id: "id",
                    version: 1,
                    language: "language",
                    type: "mp4",
                    mediaRef: {
                        src: "src",
                        contentType: "content_type",
                        bucketName: "bucket_name",
                        randomPathSlug: "random_path_slug",
                        durationSecs: 1.1,
                        isAudio: true,
                        url: "url",
                    },
                    status: "complete",
                },
            },
        });
    });

    test("transcribe", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { segments: ["segments"] };
        const rawResponseBody = { version: 1 };
        server
            .mockEndpoint()
            .post("/v1/dubbing/resource/dubbing_id/transcribe")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.resource.transcribe("dubbing_id", {
            segments: ["segments"],
        });
        expect(response).toEqual({
            version: 1,
        });
    });

    test("translate", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { segments: ["segments"] };
        const rawResponseBody = { version: 1 };
        server
            .mockEndpoint()
            .post("/v1/dubbing/resource/dubbing_id/translate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.resource.translate("dubbing_id", {
            segments: ["segments"],
        });
        expect(response).toEqual({
            version: 1,
        });
    });

    test("dub", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { segments: ["segments"] };
        const rawResponseBody = { version: 1 };
        server
            .mockEndpoint()
            .post("/v1/dubbing/resource/dubbing_id/dub")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.resource.dub("dubbing_id", {
            segments: ["segments"],
        });
        expect(response).toEqual({
            version: 1,
        });
    });

    test("render", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { render_type: "mp4" };
        const rawResponseBody = { version: 1, render_id: "render_id" };
        server
            .mockEndpoint()
            .post("/v1/dubbing/resource/dubbing_id/render/language")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.resource.render("dubbing_id", "language", {
            renderType: "mp4",
        });
        expect(response).toEqual({
            version: 1,
            renderId: "render_id",
        });
    });
});
