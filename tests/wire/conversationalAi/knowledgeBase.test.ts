// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("KnowledgeBase", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            documents: [
                {
                    type: "file",
                    id: "id",
                    name: "name",
                    metadata: { created_at_unix_secs: 1, last_updated_at_unix_secs: 1, size_bytes: 1 },
                    supported_usages: ["prompt"],
                    access_info: {
                        is_creator: true,
                        creator_name: "John Doe",
                        creator_email: "john.doe@example.com",
                        role: "admin",
                    },
                    dependent_agents: [
                        { type: "available", id: "id", name: "name", created_at_unix_secs: 1, access_level: "admin" },
                    ],
                },
            ],
            next_cursor: "next_cursor",
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/knowledge-base")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.list({
            pageSize: 1,
            search: "search",
            showOnlyOwnedDocuments: true,
            sortDirection: "asc",
            sortBy: "name",
            useTypesense: true,
            cursor: "cursor",
        });
        expect(response).toEqual({
            documents: [
                {
                    type: "file",
                    id: "id",
                    name: "name",
                    metadata: {
                        createdAtUnixSecs: 1,
                        lastUpdatedAtUnixSecs: 1,
                        sizeBytes: 1,
                    },
                    supportedUsages: ["prompt"],
                    accessInfo: {
                        isCreator: true,
                        creatorName: "John Doe",
                        creatorEmail: "john.doe@example.com",
                        role: "admin",
                    },
                    dependentAgents: [
                        {
                            type: "available",
                            id: "id",
                            name: "name",
                            createdAtUnixSecs: 1,
                            accessLevel: "admin",
                        },
                    ],
                },
            ],
            nextCursor: "next_cursor",
            hasMore: true,
        });
    });
});
