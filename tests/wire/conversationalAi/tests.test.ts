/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Tests", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            chat_history: [{ role: "user", time_in_call_secs: 1 }],
            success_condition: "success_condition",
            success_examples: [{ response: "response", type: "success" }],
            failure_examples: [{ response: "response", type: "failure" }],
            name: "name",
        };
        const rawResponseBody = { id: "id" };
        server
            .mockEndpoint()
            .post("/v1/convai/agent-testing/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.create({
            chatHistory: [
                {
                    role: "user",
                    timeInCallSecs: 1,
                },
            ],
            successCondition: "success_condition",
            successExamples: [
                {
                    response: "response",
                    type: "success",
                },
            ],
            failureExamples: [
                {
                    response: "response",
                    type: "failure",
                },
            ],
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            chat_history: [
                {
                    role: "user",
                    message: "message",
                    multivoice_message: { parts: [{ text: "text" }] },
                    tool_calls: [
                        {
                            request_id: "request_id",
                            tool_name: "tool_name",
                            params_as_json: "params_as_json",
                            tool_has_been_called: true,
                        },
                    ],
                    tool_results: [
                        {
                            request_id: "request_id",
                            tool_name: "tool_name",
                            result_value: "result_value",
                            is_error: true,
                            tool_has_been_called: true,
                            type: "client",
                        },
                    ],
                    feedback: { score: "like", time_in_call_secs: 1 },
                    llm_override: "llm_override",
                    time_in_call_secs: 1,
                    rag_retrieval_info: {
                        chunks: [{ document_id: "document_id", chunk_id: "chunk_id", vector_distance: 1.1 }],
                        embedding_model: "e5_mistral_7b_instruct",
                        retrieval_query: "retrieval_query",
                        rag_latency_secs: 1.1,
                    },
                    interrupted: true,
                    original_message: "original_message",
                    source_medium: "audio",
                },
            ],
            success_condition: "success_condition",
            success_examples: [{ response: "response", type: "success" }],
            failure_examples: [{ response: "response", type: "failure" }],
            tool_call_parameters: {
                parameters: [{ eval: { expected_value: "expected_value", type: "exact" }, path: "path" }],
                referenced_tool: { id: "id", type: "system" },
            },
            dynamic_variables: { key: "value" },
            id: "id",
            name: "name",
        };
        server
            .mockEndpoint()
            .get("/v1/convai/agent-testing/TeaqRRdTcIfIu2i7BYfT")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.get("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            chatHistory: [
                {
                    role: "user",
                    message: "message",
                    multivoiceMessage: {
                        parts: [
                            {
                                text: "text",
                            },
                        ],
                    },
                    toolCalls: [
                        {
                            requestId: "request_id",
                            toolName: "tool_name",
                            paramsAsJson: "params_as_json",
                            toolHasBeenCalled: true,
                        },
                    ],
                    toolResults: [
                        {
                            requestId: "request_id",
                            toolName: "tool_name",
                            resultValue: "result_value",
                            isError: true,
                            toolHasBeenCalled: true,
                            type: "client",
                        },
                    ],
                    feedback: {
                        score: "like",
                        timeInCallSecs: 1,
                    },
                    llmOverride: "llm_override",
                    timeInCallSecs: 1,
                    ragRetrievalInfo: {
                        chunks: [
                            {
                                documentId: "document_id",
                                chunkId: "chunk_id",
                                vectorDistance: 1.1,
                            },
                        ],
                        embeddingModel: "e5_mistral_7b_instruct",
                        retrievalQuery: "retrieval_query",
                        ragLatencySecs: 1.1,
                    },
                    interrupted: true,
                    originalMessage: "original_message",
                    sourceMedium: "audio",
                },
            ],
            successCondition: "success_condition",
            successExamples: [
                {
                    response: "response",
                    type: "success",
                },
            ],
            failureExamples: [
                {
                    response: "response",
                    type: "failure",
                },
            ],
            toolCallParameters: {
                parameters: [
                    {
                        eval: {
                            type: "exact",
                            expectedValue: "expected_value",
                        },
                        path: "path",
                    },
                ],
                referencedTool: {
                    id: "id",
                    type: "system",
                },
            },
            dynamicVariables: {
                key: "value",
            },
            id: "id",
            name: "name",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            chat_history: [{ role: "user", time_in_call_secs: 1 }],
            success_condition: "success_condition",
            success_examples: [{ response: "response", type: "success" }],
            failure_examples: [{ response: "response", type: "failure" }],
            name: "name",
        };
        const rawResponseBody = {
            chat_history: [
                {
                    role: "user",
                    message: "message",
                    multivoice_message: { parts: [{ text: "text" }] },
                    tool_calls: [
                        {
                            request_id: "request_id",
                            tool_name: "tool_name",
                            params_as_json: "params_as_json",
                            tool_has_been_called: true,
                        },
                    ],
                    tool_results: [
                        {
                            request_id: "request_id",
                            tool_name: "tool_name",
                            result_value: "result_value",
                            is_error: true,
                            tool_has_been_called: true,
                            type: "client",
                        },
                    ],
                    feedback: { score: "like", time_in_call_secs: 1 },
                    llm_override: "llm_override",
                    time_in_call_secs: 1,
                    rag_retrieval_info: {
                        chunks: [{ document_id: "document_id", chunk_id: "chunk_id", vector_distance: 1.1 }],
                        embedding_model: "e5_mistral_7b_instruct",
                        retrieval_query: "retrieval_query",
                        rag_latency_secs: 1.1,
                    },
                    interrupted: true,
                    original_message: "original_message",
                    source_medium: "audio",
                },
            ],
            success_condition: "success_condition",
            success_examples: [{ response: "response", type: "success" }],
            failure_examples: [{ response: "response", type: "failure" }],
            tool_call_parameters: {
                parameters: [{ eval: { expected_value: "expected_value", type: "exact" }, path: "path" }],
                referenced_tool: { id: "id", type: "system" },
            },
            dynamic_variables: { key: "value" },
            id: "id",
            name: "name",
        };
        server
            .mockEndpoint()
            .put("/v1/convai/agent-testing/TeaqRRdTcIfIu2i7BYfT")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.update("TeaqRRdTcIfIu2i7BYfT", {
            chatHistory: [
                {
                    role: "user",
                    timeInCallSecs: 1,
                },
            ],
            successCondition: "success_condition",
            successExamples: [
                {
                    response: "response",
                    type: "success",
                },
            ],
            failureExamples: [
                {
                    response: "response",
                    type: "failure",
                },
            ],
            name: "name",
        });
        expect(response).toEqual({
            chatHistory: [
                {
                    role: "user",
                    message: "message",
                    multivoiceMessage: {
                        parts: [
                            {
                                text: "text",
                            },
                        ],
                    },
                    toolCalls: [
                        {
                            requestId: "request_id",
                            toolName: "tool_name",
                            paramsAsJson: "params_as_json",
                            toolHasBeenCalled: true,
                        },
                    ],
                    toolResults: [
                        {
                            requestId: "request_id",
                            toolName: "tool_name",
                            resultValue: "result_value",
                            isError: true,
                            toolHasBeenCalled: true,
                            type: "client",
                        },
                    ],
                    feedback: {
                        score: "like",
                        timeInCallSecs: 1,
                    },
                    llmOverride: "llm_override",
                    timeInCallSecs: 1,
                    ragRetrievalInfo: {
                        chunks: [
                            {
                                documentId: "document_id",
                                chunkId: "chunk_id",
                                vectorDistance: 1.1,
                            },
                        ],
                        embeddingModel: "e5_mistral_7b_instruct",
                        retrievalQuery: "retrieval_query",
                        ragLatencySecs: 1.1,
                    },
                    interrupted: true,
                    originalMessage: "original_message",
                    sourceMedium: "audio",
                },
            ],
            successCondition: "success_condition",
            successExamples: [
                {
                    response: "response",
                    type: "success",
                },
            ],
            failureExamples: [
                {
                    response: "response",
                    type: "failure",
                },
            ],
            toolCallParameters: {
                parameters: [
                    {
                        eval: {
                            type: "exact",
                            expectedValue: "expected_value",
                        },
                        path: "path",
                    },
                ],
                referencedTool: {
                    id: "id",
                    type: "system",
                },
            },
            dynamicVariables: {
                key: "value",
            },
            id: "id",
            name: "name",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/convai/agent-testing/TeaqRRdTcIfIu2i7BYfT")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.delete("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("summaries", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { test_ids: ["test_id_1", "test_id_2"] };
        const rawResponseBody = {
            tests: {
                key: {
                    id: "id",
                    name: "name",
                    access_info: {
                        is_creator: true,
                        creator_name: "John Doe",
                        creator_email: "john.doe@example.com",
                        role: "admin",
                    },
                    created_at_unix_secs: 1,
                    last_updated_at_unix_secs: 1,
                },
            },
        };
        server
            .mockEndpoint()
            .post("/v1/convai/agent-testing/summaries")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.summaries({
            testIds: ["test_id_1", "test_id_2"],
        });
        expect(response).toEqual({
            tests: {
                key: {
                    id: "id",
                    name: "name",
                    accessInfo: {
                        isCreator: true,
                        creatorName: "John Doe",
                        creatorEmail: "john.doe@example.com",
                        role: "admin",
                    },
                    createdAtUnixSecs: 1,
                    lastUpdatedAtUnixSecs: 1,
                },
            },
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tests: [
                {
                    id: "id",
                    name: "name",
                    access_info: {
                        is_creator: true,
                        creator_name: "John Doe",
                        creator_email: "john.doe@example.com",
                        role: "admin",
                    },
                    created_at_unix_secs: 1,
                    last_updated_at_unix_secs: 1,
                },
            ],
            next_cursor: "next_cursor",
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/agent-testing")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.list();
        expect(response).toEqual({
            tests: [
                {
                    id: "id",
                    name: "name",
                    accessInfo: {
                        isCreator: true,
                        creatorName: "John Doe",
                        creatorEmail: "john.doe@example.com",
                        role: "admin",
                    },
                    createdAtUnixSecs: 1,
                    lastUpdatedAtUnixSecs: 1,
                },
            ],
            nextCursor: "next_cursor",
            hasMore: true,
        });
    });
});
