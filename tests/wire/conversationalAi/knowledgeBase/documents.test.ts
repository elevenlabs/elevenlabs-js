// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";

describe("Documents", () => {
    test("create_from_url", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "url" };
        const rawResponseBody = { id: "id", name: "name" };
        server
            .mockEndpoint()
            .post("/v1/convai/knowledge-base/url")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.createFromUrl({
            url: "url",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
        });
    });

    test("create_from_text", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "text" };
        const rawResponseBody = { id: "id", name: "name" };
        server
            .mockEndpoint()
            .post("/v1/convai/knowledge-base/text")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.createFromText({
            text: "text",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            type: "url",
            id: "id",
            name: "name",
            metadata: { created_at_unix_secs: 1, last_updated_at_unix_secs: 1, size_bytes: 1 },
            supported_usages: ["prompt"],
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            extracted_inner_html: "extracted_inner_html",
            url: "url",
        };
        server
            .mockEndpoint()
            .get("/v1/convai/knowledge-base/21m00Tcm4TlvDq8ikWAM")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.get("21m00Tcm4TlvDq8ikWAM", {
            agentId: "agent_id",
        });
        expect(response).toEqual({
            type: "url",
            id: "id",
            name: "name",
            metadata: {
                createdAtUnixSecs: 1,
                lastUpdatedAtUnixSecs: 1,
                sizeBytes: 1,
            },
            supportedUsages: ["prompt"],
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            extractedInnerHtml: "extracted_inner_html",
            url: "url",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/convai/knowledge-base/21m00Tcm4TlvDq8ikWAM")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.delete("21m00Tcm4TlvDq8ikWAM", {
            force: true,
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            type: "url",
            id: "id",
            name: "name",
            metadata: { created_at_unix_secs: 1, last_updated_at_unix_secs: 1, size_bytes: 1 },
            supported_usages: ["prompt"],
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            extracted_inner_html: "extracted_inner_html",
            url: "url",
        };
        server
            .mockEndpoint()
            .patch("/v1/convai/knowledge-base/21m00Tcm4TlvDq8ikWAM")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.update("21m00Tcm4TlvDq8ikWAM", {
            name: "name",
        });
        expect(response).toEqual({
            type: "url",
            id: "id",
            name: "name",
            metadata: {
                createdAtUnixSecs: 1,
                lastUpdatedAtUnixSecs: 1,
                sizeBytes: 1,
            },
            supportedUsages: ["prompt"],
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            extractedInnerHtml: "extracted_inner_html",
            url: "url",
        });
    });

    test("get_agents", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            agents: [{ type: "available", id: "id", name: "name", created_at_unix_secs: 1, access_level: "admin" }],
            next_cursor: "next_cursor",
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/knowledge-base/21m00Tcm4TlvDq8ikWAM/dependent-agents")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.getAgents("21m00Tcm4TlvDq8ikWAM", {
            cursor: "cursor",
            pageSize: 1,
        });
        expect(response).toEqual({
            agents: [
                {
                    type: "available",
                    id: "id",
                    name: "name",
                    createdAtUnixSecs: 1,
                    accessLevel: "admin",
                },
            ],
            nextCursor: "next_cursor",
            hasMore: true,
        });
    });

    test("get_content", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .get("/v1/convai/knowledge-base/21m00Tcm4TlvDq8ikWAM/content")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.getContent("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual(undefined);
    });
});
