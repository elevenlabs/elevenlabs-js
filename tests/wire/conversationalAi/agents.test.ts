/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Agents", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { conversation_config: {} };
        const rawResponseBody = { agent_id: "J3Pbu5gP6NNKBscdCdwB" };
        server
            .mockEndpoint()
            .post("/v1/convai/agents/create")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.create({
            conversationConfig: {},
        });
        expect(response).toEqual({
            agentId: "J3Pbu5gP6NNKBscdCdwB",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            agent_id: "J3Pbu5gP6NNKBscdCdwB",
            name: "My Agent",
            conversation_config: {
                asr: {
                    quality: "high",
                    provider: "elevenlabs",
                    user_input_audio_format: "pcm_16000",
                    keywords: ["hello", "world"],
                },
                turn: { turn_timeout: 7, silence_end_call_timeout: -1, mode: "turn" },
                tts: {
                    model_id: "eleven_turbo_v2",
                    voice_id: "cjVigY5qzO86Huf0OWal",
                    supported_voices: [{ label: "label", voice_id: "voice_id" }],
                    agent_output_audio_format: "pcm_16000",
                    optimize_streaming_latency: 3,
                    stability: 0.5,
                    speed: 1,
                    similarity_boost: 0.8,
                    pronunciation_dictionary_locators: [{ pronunciation_dictionary_id: "pronunciation_dictionary_id" }],
                },
                conversation: { text_only: true, max_duration_seconds: 600, client_events: ["audio", "interruption"] },
                language_presets: {
                    key: {
                        overrides: {
                            tts: { voice_id: "cjVigY5qzO86Huf0OWal", stability: 0.5, speed: 1, similarity_boost: 0.8 },
                            agent: {
                                first_message: "Hello, how can I help you today?",
                                language: "en",
                                prompt: {
                                    prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                                },
                            },
                        },
                    },
                },
                vad: { background_voice_detection: false },
                agent: {
                    first_message: "Hello, how can I help you today?",
                    language: "en",
                    dynamic_variables: { dynamic_variable_placeholders: { user_name: "John Doe" } },
                    disable_first_message_interruptions: false,
                    prompt: {
                        prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                        llm: "gemini-2.0-flash-001",
                        temperature: 0,
                        max_tokens: -1,
                        tool_ids: ["tool_ids"],
                        knowledge_base: [{ type: "file", name: "My Knowledge Base", id: "123", usage_mode: "auto" }],
                    },
                },
            },
            metadata: { created_at_unix_secs: 1, updated_at_unix_secs: 1 },
            platform_settings: {
                auth: {
                    enable_auth: true,
                    allowlist: [{ hostname: "https://example.com" }],
                    shareable_token: "1234567890",
                },
                evaluation: {
                    criteria: [
                        {
                            id: "1234567890",
                            name: "Customer satisfaction check",
                            conversation_goal_prompt:
                                "You are a helpful assistant that can answer questions about the topic of the conversation.",
                            use_knowledge_base: false,
                        },
                    ],
                },
                widget: {
                    variant: "tiny",
                    placement: "top-left",
                    expandable: "never",
                    avatar: { color_1: "#2792dc", color_2: "#9ce6e6", type: "orb" },
                    feedback_mode: "none",
                    bg_color: "bg_color",
                    text_color: "text_color",
                    btn_color: "btn_color",
                    btn_text_color: "btn_text_color",
                    border_color: "border_color",
                    focus_color: "focus_color",
                    border_radius: 1,
                    btn_radius: 1,
                    action_text: "action_text",
                    start_call_text: "start_call_text",
                    end_call_text: "end_call_text",
                    expand_text: "expand_text",
                    listening_text: "listening_text",
                    speaking_text: "speaking_text",
                    shareable_page_text: "shareable_page_text",
                    shareable_page_show_terms: true,
                    terms_text: "terms_text",
                    terms_html: "terms_html",
                    terms_key: "terms_key",
                    show_avatar_when_collapsed: true,
                    disable_banner: true,
                    override_link: "override_link",
                    mic_muting_enabled: true,
                    transcript_enabled: true,
                    text_input_enabled: true,
                    default_expanded: true,
                    always_expanded: true,
                    language_selector: false,
                    supports_text_only: true,
                    custom_avatar_path: "https://example.com/avatar.png",
                    language_presets: { key: {} },
                },
                data_collection: {
                    key: {
                        type: "string",
                        description: "My property",
                        dynamic_variable: "Dynamic variable",
                        constant_value: "Constant value",
                    },
                },
                overrides: {
                    custom_llm_extra_body: true,
                    enable_conversation_initiation_client_data_from_webhook: true,
                },
                call_limits: { agent_concurrency_limit: -1, daily_limit: 100000, bursting_enabled: true },
                privacy: {
                    record_voice: true,
                    retention_days: -1,
                    delete_transcript_and_pii: false,
                    delete_audio: false,
                    apply_to_existing_conversations: false,
                    zero_retention_mode: false,
                },
                workspace_overrides: {
                    conversation_initiation_client_data_webhook: {
                        url: "https://example.com/webhook",
                        request_headers: { "Content-Type": "application/json" },
                    },
                },
                testing: {
                    attached_tests: [{ test_id: "test_123", workflow_node_id: "node_abc" }, { test_id: "test_456" }],
                },
                safety: { is_blocked_ivc: true, is_blocked_non_ivc: true, ignore_safety_evaluation: true },
            },
            phone_numbers: [
                {
                    phone_number: "+1987654321",
                    label: "Sales Team",
                    supports_inbound: true,
                    supports_outbound: true,
                    phone_number_id: "phone_456",
                    assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
                    outbound_trunk: {
                        address: "address",
                        transport: "auto",
                        media_encryption: "disabled",
                        has_auth_credentials: true,
                    },
                    inbound_trunk: {
                        allowed_addresses: ["allowed_addresses"],
                        media_encryption: "disabled",
                        has_auth_credentials: true,
                    },
                    livekit_stack: "standard",
                    provider: "sip_trunk",
                },
            ],
            workflow: { key: "value" },
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            tags: ["tags"],
        };
        server
            .mockEndpoint()
            .get("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.get("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            agentId: "J3Pbu5gP6NNKBscdCdwB",
            name: "My Agent",
            conversationConfig: {
                asr: {
                    quality: "high",
                    provider: "elevenlabs",
                    userInputAudioFormat: "pcm_16000",
                    keywords: ["hello", "world"],
                },
                turn: {
                    turnTimeout: 7,
                    silenceEndCallTimeout: -1,
                    mode: "turn",
                },
                tts: {
                    modelId: "eleven_turbo_v2",
                    voiceId: "cjVigY5qzO86Huf0OWal",
                    supportedVoices: [
                        {
                            label: "label",
                            voiceId: "voice_id",
                        },
                    ],
                    agentOutputAudioFormat: "pcm_16000",
                    optimizeStreamingLatency: 3,
                    stability: 0.5,
                    speed: 1,
                    similarityBoost: 0.8,
                    pronunciationDictionaryLocators: [
                        {
                            pronunciationDictionaryId: "pronunciation_dictionary_id",
                        },
                    ],
                },
                conversation: {
                    textOnly: true,
                    maxDurationSeconds: 600,
                    clientEvents: ["audio", "interruption"],
                },
                languagePresets: {
                    key: {
                        overrides: {
                            tts: {
                                voiceId: "cjVigY5qzO86Huf0OWal",
                                stability: 0.5,
                                speed: 1,
                                similarityBoost: 0.8,
                            },
                            agent: {
                                firstMessage: "Hello, how can I help you today?",
                                language: "en",
                                prompt: {
                                    prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                                },
                            },
                        },
                    },
                },
                vad: {
                    backgroundVoiceDetection: false,
                },
                agent: {
                    firstMessage: "Hello, how can I help you today?",
                    language: "en",
                    dynamicVariables: {
                        dynamicVariablePlaceholders: {
                            user_name: "John Doe",
                        },
                    },
                    disableFirstMessageInterruptions: false,
                    prompt: {
                        prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                        llm: "gemini-2.0-flash-001",
                        temperature: 0,
                        maxTokens: -1,
                        toolIds: ["tool_ids"],
                        knowledgeBase: [
                            {
                                type: "file",
                                name: "My Knowledge Base",
                                id: "123",
                                usageMode: "auto",
                            },
                        ],
                    },
                },
            },
            metadata: {
                createdAtUnixSecs: 1,
                updatedAtUnixSecs: 1,
            },
            platformSettings: {
                auth: {
                    enableAuth: true,
                    allowlist: [
                        {
                            hostname: "https://example.com",
                        },
                    ],
                    shareableToken: "1234567890",
                },
                evaluation: {
                    criteria: [
                        {
                            id: "1234567890",
                            name: "Customer satisfaction check",
                            conversationGoalPrompt:
                                "You are a helpful assistant that can answer questions about the topic of the conversation.",
                            useKnowledgeBase: false,
                        },
                    ],
                },
                widget: {
                    variant: "tiny",
                    placement: "top-left",
                    expandable: "never",
                    avatar: {
                        type: "orb",
                        color1: "#2792dc",
                        color2: "#9ce6e6",
                    },
                    feedbackMode: "none",
                    bgColor: "bg_color",
                    textColor: "text_color",
                    btnColor: "btn_color",
                    btnTextColor: "btn_text_color",
                    borderColor: "border_color",
                    focusColor: "focus_color",
                    borderRadius: 1,
                    btnRadius: 1,
                    actionText: "action_text",
                    startCallText: "start_call_text",
                    endCallText: "end_call_text",
                    expandText: "expand_text",
                    listeningText: "listening_text",
                    speakingText: "speaking_text",
                    shareablePageText: "shareable_page_text",
                    shareablePageShowTerms: true,
                    termsText: "terms_text",
                    termsHtml: "terms_html",
                    termsKey: "terms_key",
                    showAvatarWhenCollapsed: true,
                    disableBanner: true,
                    overrideLink: "override_link",
                    micMutingEnabled: true,
                    transcriptEnabled: true,
                    textInputEnabled: true,
                    defaultExpanded: true,
                    alwaysExpanded: true,
                    languageSelector: false,
                    supportsTextOnly: true,
                    customAvatarPath: "https://example.com/avatar.png",
                    languagePresets: {
                        key: {},
                    },
                },
                dataCollection: {
                    key: {
                        type: "string",
                        description: "My property",
                        dynamicVariable: "Dynamic variable",
                        constantValue: "Constant value",
                    },
                },
                overrides: {
                    customLlmExtraBody: true,
                    enableConversationInitiationClientDataFromWebhook: true,
                },
                callLimits: {
                    agentConcurrencyLimit: -1,
                    dailyLimit: 100000,
                    burstingEnabled: true,
                },
                privacy: {
                    recordVoice: true,
                    retentionDays: -1,
                    deleteTranscriptAndPii: false,
                    deleteAudio: false,
                    applyToExistingConversations: false,
                    zeroRetentionMode: false,
                },
                workspaceOverrides: {
                    conversationInitiationClientDataWebhook: {
                        url: "https://example.com/webhook",
                        requestHeaders: {
                            "Content-Type": "application/json",
                        },
                    },
                },
                testing: {
                    attachedTests: [
                        {
                            testId: "test_123",
                            workflowNodeId: "node_abc",
                        },
                        {
                            testId: "test_456",
                        },
                    ],
                },
                safety: {
                    isBlockedIvc: true,
                    isBlockedNonIvc: true,
                    ignoreSafetyEvaluation: true,
                },
            },
            phoneNumbers: [
                {
                    provider: "sip_trunk",
                    phoneNumber: "+1987654321",
                    label: "Sales Team",
                    supportsInbound: true,
                    supportsOutbound: true,
                    phoneNumberId: "phone_456",
                    assignedAgent: {
                        agentId: "F3Pbu5gP6NNKBscdCdwB",
                        agentName: "My Agent",
                    },
                    outboundTrunk: {
                        address: "address",
                        transport: "auto",
                        mediaEncryption: "disabled",
                        hasAuthCredentials: true,
                    },
                    inboundTrunk: {
                        allowedAddresses: ["allowed_addresses"],
                        mediaEncryption: "disabled",
                        hasAuthCredentials: true,
                    },
                    livekitStack: "standard",
                },
            ],
            workflow: {
                key: "value",
            },
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            tags: ["tags"],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM").respondWith().statusCode(200).build();

        const response = await client.conversationalAi.agents.delete("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            agent_id: "J3Pbu5gP6NNKBscdCdwB",
            name: "My Agent",
            conversation_config: {
                asr: {
                    quality: "high",
                    provider: "elevenlabs",
                    user_input_audio_format: "pcm_16000",
                    keywords: ["hello", "world"],
                },
                turn: { turn_timeout: 7, silence_end_call_timeout: -1, mode: "turn" },
                tts: {
                    model_id: "eleven_turbo_v2",
                    voice_id: "cjVigY5qzO86Huf0OWal",
                    supported_voices: [{ label: "label", voice_id: "voice_id" }],
                    agent_output_audio_format: "pcm_16000",
                    optimize_streaming_latency: 3,
                    stability: 0.5,
                    speed: 1,
                    similarity_boost: 0.8,
                    pronunciation_dictionary_locators: [{ pronunciation_dictionary_id: "pronunciation_dictionary_id" }],
                },
                conversation: { text_only: true, max_duration_seconds: 600, client_events: ["audio", "interruption"] },
                language_presets: {
                    key: {
                        overrides: {
                            tts: { voice_id: "cjVigY5qzO86Huf0OWal", stability: 0.5, speed: 1, similarity_boost: 0.8 },
                            agent: {
                                first_message: "Hello, how can I help you today?",
                                language: "en",
                                prompt: {
                                    prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                                },
                            },
                        },
                    },
                },
                vad: { background_voice_detection: false },
                agent: {
                    first_message: "Hello, how can I help you today?",
                    language: "en",
                    dynamic_variables: { dynamic_variable_placeholders: { user_name: "John Doe" } },
                    disable_first_message_interruptions: false,
                    prompt: {
                        prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                        llm: "gemini-2.0-flash-001",
                        temperature: 0,
                        max_tokens: -1,
                        tool_ids: ["tool_ids"],
                        knowledge_base: [{ type: "file", name: "My Knowledge Base", id: "123", usage_mode: "auto" }],
                    },
                },
            },
            metadata: { created_at_unix_secs: 1, updated_at_unix_secs: 1 },
            platform_settings: {
                auth: {
                    enable_auth: true,
                    allowlist: [{ hostname: "https://example.com" }],
                    shareable_token: "1234567890",
                },
                evaluation: {
                    criteria: [
                        {
                            id: "1234567890",
                            name: "Customer satisfaction check",
                            conversation_goal_prompt:
                                "You are a helpful assistant that can answer questions about the topic of the conversation.",
                            use_knowledge_base: false,
                        },
                    ],
                },
                widget: {
                    variant: "tiny",
                    placement: "top-left",
                    expandable: "never",
                    avatar: { color_1: "#2792dc", color_2: "#9ce6e6", type: "orb" },
                    feedback_mode: "none",
                    bg_color: "bg_color",
                    text_color: "text_color",
                    btn_color: "btn_color",
                    btn_text_color: "btn_text_color",
                    border_color: "border_color",
                    focus_color: "focus_color",
                    border_radius: 1,
                    btn_radius: 1,
                    action_text: "action_text",
                    start_call_text: "start_call_text",
                    end_call_text: "end_call_text",
                    expand_text: "expand_text",
                    listening_text: "listening_text",
                    speaking_text: "speaking_text",
                    shareable_page_text: "shareable_page_text",
                    shareable_page_show_terms: true,
                    terms_text: "terms_text",
                    terms_html: "terms_html",
                    terms_key: "terms_key",
                    show_avatar_when_collapsed: true,
                    disable_banner: true,
                    override_link: "override_link",
                    mic_muting_enabled: true,
                    transcript_enabled: true,
                    text_input_enabled: true,
                    default_expanded: true,
                    always_expanded: true,
                    language_selector: false,
                    supports_text_only: true,
                    custom_avatar_path: "https://example.com/avatar.png",
                    language_presets: { key: {} },
                },
                data_collection: {
                    key: {
                        type: "string",
                        description: "My property",
                        dynamic_variable: "Dynamic variable",
                        constant_value: "Constant value",
                    },
                },
                overrides: {
                    custom_llm_extra_body: true,
                    enable_conversation_initiation_client_data_from_webhook: true,
                },
                call_limits: { agent_concurrency_limit: -1, daily_limit: 100000, bursting_enabled: true },
                privacy: {
                    record_voice: true,
                    retention_days: -1,
                    delete_transcript_and_pii: false,
                    delete_audio: false,
                    apply_to_existing_conversations: false,
                    zero_retention_mode: false,
                },
                workspace_overrides: {
                    conversation_initiation_client_data_webhook: {
                        url: "https://example.com/webhook",
                        request_headers: { "Content-Type": "application/json" },
                    },
                },
                testing: {
                    attached_tests: [{ test_id: "test_123", workflow_node_id: "node_abc" }, { test_id: "test_456" }],
                },
                safety: { is_blocked_ivc: true, is_blocked_non_ivc: true, ignore_safety_evaluation: true },
            },
            phone_numbers: [
                {
                    phone_number: "+1987654321",
                    label: "Sales Team",
                    supports_inbound: true,
                    supports_outbound: true,
                    phone_number_id: "phone_456",
                    assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
                    outbound_trunk: {
                        address: "address",
                        transport: "auto",
                        media_encryption: "disabled",
                        has_auth_credentials: true,
                    },
                    inbound_trunk: {
                        allowed_addresses: ["allowed_addresses"],
                        media_encryption: "disabled",
                        has_auth_credentials: true,
                    },
                    livekit_stack: "standard",
                    provider: "sip_trunk",
                },
            ],
            workflow: { key: "value" },
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            tags: ["tags"],
        };
        server
            .mockEndpoint()
            .patch("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.update("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            agentId: "J3Pbu5gP6NNKBscdCdwB",
            name: "My Agent",
            conversationConfig: {
                asr: {
                    quality: "high",
                    provider: "elevenlabs",
                    userInputAudioFormat: "pcm_16000",
                    keywords: ["hello", "world"],
                },
                turn: {
                    turnTimeout: 7,
                    silenceEndCallTimeout: -1,
                    mode: "turn",
                },
                tts: {
                    modelId: "eleven_turbo_v2",
                    voiceId: "cjVigY5qzO86Huf0OWal",
                    supportedVoices: [
                        {
                            label: "label",
                            voiceId: "voice_id",
                        },
                    ],
                    agentOutputAudioFormat: "pcm_16000",
                    optimizeStreamingLatency: 3,
                    stability: 0.5,
                    speed: 1,
                    similarityBoost: 0.8,
                    pronunciationDictionaryLocators: [
                        {
                            pronunciationDictionaryId: "pronunciation_dictionary_id",
                        },
                    ],
                },
                conversation: {
                    textOnly: true,
                    maxDurationSeconds: 600,
                    clientEvents: ["audio", "interruption"],
                },
                languagePresets: {
                    key: {
                        overrides: {
                            tts: {
                                voiceId: "cjVigY5qzO86Huf0OWal",
                                stability: 0.5,
                                speed: 1,
                                similarityBoost: 0.8,
                            },
                            agent: {
                                firstMessage: "Hello, how can I help you today?",
                                language: "en",
                                prompt: {
                                    prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                                },
                            },
                        },
                    },
                },
                vad: {
                    backgroundVoiceDetection: false,
                },
                agent: {
                    firstMessage: "Hello, how can I help you today?",
                    language: "en",
                    dynamicVariables: {
                        dynamicVariablePlaceholders: {
                            user_name: "John Doe",
                        },
                    },
                    disableFirstMessageInterruptions: false,
                    prompt: {
                        prompt: "You are a helpful assistant that can answer questions about the topic of the conversation.",
                        llm: "gemini-2.0-flash-001",
                        temperature: 0,
                        maxTokens: -1,
                        toolIds: ["tool_ids"],
                        knowledgeBase: [
                            {
                                type: "file",
                                name: "My Knowledge Base",
                                id: "123",
                                usageMode: "auto",
                            },
                        ],
                    },
                },
            },
            metadata: {
                createdAtUnixSecs: 1,
                updatedAtUnixSecs: 1,
            },
            platformSettings: {
                auth: {
                    enableAuth: true,
                    allowlist: [
                        {
                            hostname: "https://example.com",
                        },
                    ],
                    shareableToken: "1234567890",
                },
                evaluation: {
                    criteria: [
                        {
                            id: "1234567890",
                            name: "Customer satisfaction check",
                            conversationGoalPrompt:
                                "You are a helpful assistant that can answer questions about the topic of the conversation.",
                            useKnowledgeBase: false,
                        },
                    ],
                },
                widget: {
                    variant: "tiny",
                    placement: "top-left",
                    expandable: "never",
                    avatar: {
                        type: "orb",
                        color1: "#2792dc",
                        color2: "#9ce6e6",
                    },
                    feedbackMode: "none",
                    bgColor: "bg_color",
                    textColor: "text_color",
                    btnColor: "btn_color",
                    btnTextColor: "btn_text_color",
                    borderColor: "border_color",
                    focusColor: "focus_color",
                    borderRadius: 1,
                    btnRadius: 1,
                    actionText: "action_text",
                    startCallText: "start_call_text",
                    endCallText: "end_call_text",
                    expandText: "expand_text",
                    listeningText: "listening_text",
                    speakingText: "speaking_text",
                    shareablePageText: "shareable_page_text",
                    shareablePageShowTerms: true,
                    termsText: "terms_text",
                    termsHtml: "terms_html",
                    termsKey: "terms_key",
                    showAvatarWhenCollapsed: true,
                    disableBanner: true,
                    overrideLink: "override_link",
                    micMutingEnabled: true,
                    transcriptEnabled: true,
                    textInputEnabled: true,
                    defaultExpanded: true,
                    alwaysExpanded: true,
                    languageSelector: false,
                    supportsTextOnly: true,
                    customAvatarPath: "https://example.com/avatar.png",
                    languagePresets: {
                        key: {},
                    },
                },
                dataCollection: {
                    key: {
                        type: "string",
                        description: "My property",
                        dynamicVariable: "Dynamic variable",
                        constantValue: "Constant value",
                    },
                },
                overrides: {
                    customLlmExtraBody: true,
                    enableConversationInitiationClientDataFromWebhook: true,
                },
                callLimits: {
                    agentConcurrencyLimit: -1,
                    dailyLimit: 100000,
                    burstingEnabled: true,
                },
                privacy: {
                    recordVoice: true,
                    retentionDays: -1,
                    deleteTranscriptAndPii: false,
                    deleteAudio: false,
                    applyToExistingConversations: false,
                    zeroRetentionMode: false,
                },
                workspaceOverrides: {
                    conversationInitiationClientDataWebhook: {
                        url: "https://example.com/webhook",
                        requestHeaders: {
                            "Content-Type": "application/json",
                        },
                    },
                },
                testing: {
                    attachedTests: [
                        {
                            testId: "test_123",
                            workflowNodeId: "node_abc",
                        },
                        {
                            testId: "test_456",
                        },
                    ],
                },
                safety: {
                    isBlockedIvc: true,
                    isBlockedNonIvc: true,
                    ignoreSafetyEvaluation: true,
                },
            },
            phoneNumbers: [
                {
                    provider: "sip_trunk",
                    phoneNumber: "+1987654321",
                    label: "Sales Team",
                    supportsInbound: true,
                    supportsOutbound: true,
                    phoneNumberId: "phone_456",
                    assignedAgent: {
                        agentId: "F3Pbu5gP6NNKBscdCdwB",
                        agentName: "My Agent",
                    },
                    outboundTrunk: {
                        address: "address",
                        transport: "auto",
                        mediaEncryption: "disabled",
                        hasAuthCredentials: true,
                    },
                    inboundTrunk: {
                        allowedAddresses: ["allowed_addresses"],
                        mediaEncryption: "disabled",
                        hasAuthCredentials: true,
                    },
                    livekitStack: "standard",
                },
            ],
            workflow: {
                key: "value",
            },
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            tags: ["tags"],
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            agents: [
                {
                    agent_id: "J3Pbu5gP6NNKBscdCdwB",
                    name: "My Agent",
                    tags: ["Customer Support", "Technical Help", "Eleven"],
                    created_at_unix_secs: 1716153600,
                    access_info: {
                        is_creator: true,
                        creator_name: "John Doe",
                        creator_email: "john@example.com",
                        role: "admin",
                    },
                    last_call_time_unix_secs: 1,
                },
            ],
            next_cursor: "123",
            has_more: false,
        };
        server.mockEndpoint().get("/v1/convai/agents").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.conversationalAi.agents.list();
        expect(response).toEqual({
            agents: [
                {
                    agentId: "J3Pbu5gP6NNKBscdCdwB",
                    name: "My Agent",
                    tags: ["Customer Support", "Technical Help", "Eleven"],
                    createdAtUnixSecs: 1716153600,
                    accessInfo: {
                        isCreator: true,
                        creatorName: "John Doe",
                        creatorEmail: "john@example.com",
                        role: "admin",
                    },
                    lastCallTimeUnixSecs: 1,
                },
            ],
            nextCursor: "123",
            hasMore: false,
        });
    });

    test("duplicate", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { agent_id: "J3Pbu5gP6NNKBscdCdwB" };
        server
            .mockEndpoint()
            .post("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM/duplicate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.duplicate("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            agentId: "J3Pbu5gP6NNKBscdCdwB",
        });
    });

    test("simulate_conversation", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            simulation_specification: {
                simulated_user_config: {
                    first_message: "Hello, how can I help you today?",
                    language: "en",
                    disable_first_message_interruptions: false,
                },
            },
        };
        const rawResponseBody = {
            simulated_conversation: [
                {
                    role: "user",
                    agent_metadata: { agent_id: "agent_id" },
                    message: "message",
                    multivoice_message: { parts: [{ text: "text" }] },
                    tool_calls: [
                        {
                            request_id: "request_id",
                            tool_name: "tool_name",
                            params_as_json: "params_as_json",
                            tool_has_been_called: true,
                        },
                    ],
                    tool_results: [
                        {
                            request_id: "request_id",
                            tool_name: "tool_name",
                            result_value: "result_value",
                            is_error: true,
                            tool_has_been_called: true,
                        },
                    ],
                    feedback: { score: "like", time_in_call_secs: 1 },
                    llm_override: "llm_override",
                    time_in_call_secs: 1,
                    rag_retrieval_info: {
                        chunks: [{ document_id: "document_id", chunk_id: "chunk_id", vector_distance: 1.1 }],
                        embedding_model: "e5_mistral_7b_instruct",
                        retrieval_query: "retrieval_query",
                        rag_latency_secs: 1.1,
                    },
                    interrupted: true,
                    original_message: "original_message",
                    source_medium: "audio",
                },
            ],
            analysis: {
                evaluation_criteria_results: {
                    key: { criteria_id: "criteria_id", result: "success", rationale: "rationale" },
                },
                data_collection_results: { key: { data_collection_id: "data_collection_id", rationale: "rationale" } },
                call_successful: "success",
                transcript_summary: "transcript_summary",
                call_summary_title: "call_summary_title",
            },
        };
        server
            .mockEndpoint()
            .post("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM/simulate-conversation")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.simulateConversation("21m00Tcm4TlvDq8ikWAM", {
            simulationSpecification: {
                simulatedUserConfig: {
                    firstMessage: "Hello, how can I help you today?",
                    language: "en",
                    disableFirstMessageInterruptions: false,
                },
            },
        });
        expect(response).toEqual({
            simulatedConversation: [
                {
                    role: "user",
                    agentMetadata: {
                        agentId: "agent_id",
                    },
                    message: "message",
                    multivoiceMessage: {
                        parts: [
                            {
                                text: "text",
                            },
                        ],
                    },
                    toolCalls: [
                        {
                            requestId: "request_id",
                            toolName: "tool_name",
                            paramsAsJson: "params_as_json",
                            toolHasBeenCalled: true,
                        },
                    ],
                    toolResults: [
                        {
                            requestId: "request_id",
                            toolName: "tool_name",
                            resultValue: "result_value",
                            isError: true,
                            toolHasBeenCalled: true,
                        },
                    ],
                    feedback: {
                        score: "like",
                        timeInCallSecs: 1,
                    },
                    llmOverride: "llm_override",
                    timeInCallSecs: 1,
                    ragRetrievalInfo: {
                        chunks: [
                            {
                                documentId: "document_id",
                                chunkId: "chunk_id",
                                vectorDistance: 1.1,
                            },
                        ],
                        embeddingModel: "e5_mistral_7b_instruct",
                        retrievalQuery: "retrieval_query",
                        ragLatencySecs: 1.1,
                    },
                    interrupted: true,
                    originalMessage: "original_message",
                    sourceMedium: "audio",
                },
            ],
            analysis: {
                evaluationCriteriaResults: {
                    key: {
                        criteriaId: "criteria_id",
                        result: "success",
                        rationale: "rationale",
                    },
                },
                dataCollectionResults: {
                    key: {
                        dataCollectionId: "data_collection_id",
                        rationale: "rationale",
                    },
                },
                callSuccessful: "success",
                transcriptSummary: "transcript_summary",
                callSummaryTitle: "call_summary_title",
            },
        });
    });

    test("simulate_conversation_stream", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            simulation_specification: {
                simulated_user_config: {
                    first_message: "Hello, how can I help you today?",
                    language: "en",
                    disable_first_message_interruptions: false,
                },
            },
        };

        server
            .mockEndpoint()
            .post("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM/simulate-conversation/stream")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.conversationalAi.agents.simulateConversationStream("21m00Tcm4TlvDq8ikWAM", {
            simulationSpecification: {
                simulatedUserConfig: {
                    firstMessage: "Hello, how can I help you today?",
                    language: "en",
                    disableFirstMessageInterruptions: false,
                },
            },
        });
        expect(response).toEqual(undefined);
    });

    test("run_tests", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { tests: [{ test_id: "test_id" }] };
        const rawResponseBody = {
            id: "id",
            created_at: 1,
            test_runs: [
                {
                    test_run_id: "test_run_id",
                    test_invocation_id: "test_invocation_id",
                    agent_id: "agent_id",
                    workflow_node_id: "workflow_node_id",
                    status: "pending",
                    agent_responses: [{ role: "user", time_in_call_secs: 1 }],
                    test_id: "test_id",
                    test_name: "test_name",
                    condition_result: { result: "success" },
                    last_updated_at_unix: 1,
                    metadata: {
                        workspace_id: "workspace_id",
                        test_name: "test_name",
                        ran_by_user_email: "ran_by_user_email",
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM/run-tests")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.runTests("21m00Tcm4TlvDq8ikWAM", {
            tests: [
                {
                    testId: "test_id",
                },
            ],
        });
        expect(response).toEqual({
            id: "id",
            createdAt: 1,
            testRuns: [
                {
                    testRunId: "test_run_id",
                    testInvocationId: "test_invocation_id",
                    agentId: "agent_id",
                    workflowNodeId: "workflow_node_id",
                    status: "pending",
                    agentResponses: [
                        {
                            role: "user",
                            timeInCallSecs: 1,
                        },
                    ],
                    testId: "test_id",
                    testName: "test_name",
                    conditionResult: {
                        result: "success",
                    },
                    lastUpdatedAtUnix: 1,
                    metadata: {
                        workspaceId: "workspace_id",
                        testName: "test_name",
                        ranByUserEmail: "ran_by_user_email",
                    },
                },
            ],
        });
    });
});
