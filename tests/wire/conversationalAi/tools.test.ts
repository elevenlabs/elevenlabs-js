// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Tools", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tools: [
                {
                    id: "id",
                    tool_config: {
                        type: "client",
                        name: "name",
                        description: "description",
                        assignments: [{ source: "response", dynamic_variable: "user_name", value_path: "user.name" }],
                        parameters: undefined,
                        expects_response: false,
                        dynamic_variables: { dynamic_variable_placeholders: { user_name: "John Doe" } },
                    },
                    access_info: {
                        is_creator: true,
                        creator_name: "John Doe",
                        creator_email: "john.doe@example.com",
                        role: "admin",
                    },
                    usage_stats: { avg_latency_secs: 1.1 },
                },
            ],
        };
        server.mockEndpoint().get("/v1/convai/tools").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.conversationalAi.tools.list();
        expect(response).toEqual({
            tools: [
                {
                    id: "id",
                    toolConfig: {
                        type: "client",
                        name: "name",
                        description: "description",
                        assignments: [
                            {
                                source: "response",
                                dynamicVariable: "user_name",
                                valuePath: "user.name",
                            },
                        ],
                        parameters: undefined,
                        expectsResponse: false,
                        dynamicVariables: {
                            dynamicVariablePlaceholders: {
                                user_name: "John Doe",
                            },
                        },
                    },
                    accessInfo: {
                        isCreator: true,
                        creatorName: "John Doe",
                        creatorEmail: "john.doe@example.com",
                        role: "admin",
                    },
                    usageStats: {
                        avgLatencySecs: 1.1,
                    },
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tool_config: { type: "client", name: "name", description: "description", expects_response: false },
        };
        const rawResponseBody = {
            id: "id",
            tool_config: {
                type: "client",
                name: "name",
                description: "description",
                response_timeout_secs: 1,
                disable_interruptions: true,
                force_pre_tool_speech: true,
                assignments: [{ source: "response", dynamic_variable: "user_name", value_path: "user.name" }],
                parameters: {
                    type: "object",
                    required: ["required"],
                    description: "description",
                    properties: {
                        key: {
                            type: "string",
                            description: "My property",
                            enum: undefined,
                            dynamic_variable: "Dynamic variable",
                            constant_value: "Constant value",
                        },
                    },
                },
                expects_response: false,
                dynamic_variables: { dynamic_variable_placeholders: { user_name: "John Doe" } },
            },
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            usage_stats: { total_calls: 1, avg_latency_secs: 1.1 },
        };
        server
            .mockEndpoint()
            .post("/v1/convai/tools")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tools.create({
            toolConfig: {
                type: "client",
                name: "name",
                description: "description",
                expectsResponse: false,
            },
        });
        expect(response).toEqual({
            id: "id",
            toolConfig: {
                type: "client",
                name: "name",
                description: "description",
                responseTimeoutSecs: 1,
                disableInterruptions: true,
                forcePreToolSpeech: true,
                assignments: [
                    {
                        source: "response",
                        dynamicVariable: "user_name",
                        valuePath: "user.name",
                    },
                ],
                parameters: {
                    type: "object",
                    required: ["required"],
                    description: "description",
                    properties: {
                        key: {
                            type: "string",
                            description: "My property",
                            enum: undefined,
                            dynamicVariable: "Dynamic variable",
                            constantValue: "Constant value",
                        },
                    },
                },
                expectsResponse: false,
                dynamicVariables: {
                    dynamicVariablePlaceholders: {
                        user_name: "John Doe",
                    },
                },
            },
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            usageStats: {
                totalCalls: 1,
                avgLatencySecs: 1.1,
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            tool_config: {
                type: "client",
                name: "name",
                description: "description",
                response_timeout_secs: 1,
                disable_interruptions: true,
                force_pre_tool_speech: true,
                assignments: [{ source: "response", dynamic_variable: "user_name", value_path: "user.name" }],
                parameters: {
                    type: "object",
                    required: ["required"],
                    description: "description",
                    properties: {
                        key: {
                            type: "string",
                            description: "My property",
                            enum: undefined,
                            dynamic_variable: "Dynamic variable",
                            constant_value: "Constant value",
                        },
                    },
                },
                expects_response: false,
                dynamic_variables: { dynamic_variable_placeholders: { user_name: "John Doe" } },
            },
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            usage_stats: { total_calls: 1, avg_latency_secs: 1.1 },
        };
        server
            .mockEndpoint()
            .get("/v1/convai/tools/tool_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tools.get("tool_id");
        expect(response).toEqual({
            id: "id",
            toolConfig: {
                type: "client",
                name: "name",
                description: "description",
                responseTimeoutSecs: 1,
                disableInterruptions: true,
                forcePreToolSpeech: true,
                assignments: [
                    {
                        source: "response",
                        dynamicVariable: "user_name",
                        valuePath: "user.name",
                    },
                ],
                parameters: {
                    type: "object",
                    required: ["required"],
                    description: "description",
                    properties: {
                        key: {
                            type: "string",
                            description: "My property",
                            enum: undefined,
                            dynamicVariable: "Dynamic variable",
                            constantValue: "Constant value",
                        },
                    },
                },
                expectsResponse: false,
                dynamicVariables: {
                    dynamicVariablePlaceholders: {
                        user_name: "John Doe",
                    },
                },
            },
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            usageStats: {
                totalCalls: 1,
                avgLatencySecs: 1.1,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/convai/tools/tool_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tools.delete("tool_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tool_config: { type: "client", name: "name", description: "description", expects_response: false },
        };
        const rawResponseBody = {
            id: "id",
            tool_config: {
                type: "client",
                name: "name",
                description: "description",
                response_timeout_secs: 1,
                disable_interruptions: true,
                force_pre_tool_speech: true,
                assignments: [{ source: "response", dynamic_variable: "user_name", value_path: "user.name" }],
                parameters: {
                    type: "object",
                    required: ["required"],
                    description: "description",
                    properties: {
                        key: {
                            type: "string",
                            description: "My property",
                            enum: undefined,
                            dynamic_variable: "Dynamic variable",
                            constant_value: "Constant value",
                        },
                    },
                },
                expects_response: false,
                dynamic_variables: { dynamic_variable_placeholders: { user_name: "John Doe" } },
            },
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            usage_stats: { total_calls: 1, avg_latency_secs: 1.1 },
        };
        server
            .mockEndpoint()
            .patch("/v1/convai/tools/tool_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tools.update("tool_id", {
            toolConfig: {
                type: "client",
                name: "name",
                description: "description",
                expectsResponse: false,
            },
        });
        expect(response).toEqual({
            id: "id",
            toolConfig: {
                type: "client",
                name: "name",
                description: "description",
                responseTimeoutSecs: 1,
                disableInterruptions: true,
                forcePreToolSpeech: true,
                assignments: [
                    {
                        source: "response",
                        dynamicVariable: "user_name",
                        valuePath: "user.name",
                    },
                ],
                parameters: {
                    type: "object",
                    required: ["required"],
                    description: "description",
                    properties: {
                        key: {
                            type: "string",
                            description: "My property",
                            enum: undefined,
                            dynamicVariable: "Dynamic variable",
                            constantValue: "Constant value",
                        },
                    },
                },
                expectsResponse: false,
                dynamicVariables: {
                    dynamicVariablePlaceholders: {
                        user_name: "John Doe",
                    },
                },
            },
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            usageStats: {
                totalCalls: 1,
                avgLatencySecs: 1.1,
            },
        });
    });

    test("get_dependent_agents", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            agents: [{ type: "available", id: "id", name: "name", created_at_unix_secs: 1, access_level: "admin" }],
            next_cursor: "next_cursor",
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/tools/tool_id/dependent-agents")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tools.getDependentAgents("tool_id", {
            cursor: "cursor",
            pageSize: 1,
        });
        expect(response).toEqual({
            agents: [
                {
                    type: "available",
                    id: "id",
                    name: "name",
                    createdAtUnixSecs: 1,
                    accessLevel: "admin",
                },
            ],
            nextCursor: "next_cursor",
            hasMore: true,
        });
    });
});
