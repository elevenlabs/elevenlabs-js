// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Secrets", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            secrets: [
                {
                    type: "stored",
                    secret_id: "secret_id",
                    name: "name",
                    used_by: {
                        tools: [
                            {
                                type: "available",
                                id: "id",
                                name: "name",
                                created_at_unix_secs: 1,
                                access_level: "admin",
                            },
                        ],
                        agents: [
                            {
                                type: "available",
                                id: "id",
                                name: "name",
                                created_at_unix_secs: 1,
                                access_level: "admin",
                            },
                        ],
                        others: ["conversation_initiation_webhook"],
                    },
                },
            ],
        };
        server.mockEndpoint().get("/v1/convai/secrets").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.conversationalAi.secrets.list();
        expect(response).toEqual({
            secrets: [
                {
                    type: "stored",
                    secretId: "secret_id",
                    name: "name",
                    usedBy: {
                        tools: [
                            {
                                type: "available",
                                id: "id",
                                name: "name",
                                createdAtUnixSecs: 1,
                                accessLevel: "admin",
                            },
                        ],
                        agents: [
                            {
                                type: "available",
                                id: "id",
                                name: "name",
                                createdAtUnixSecs: 1,
                                accessLevel: "admin",
                            },
                        ],
                        others: ["conversation_initiation_webhook"],
                    },
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "new", name: "name", value: "value" };
        const rawResponseBody = { type: "stored", secret_id: "secret_id", name: "name" };
        server
            .mockEndpoint()
            .post("/v1/convai/secrets")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.secrets.create({
            name: "name",
            value: "value",
        });
        expect(response).toEqual({
            type: "stored",
            secretId: "secret_id",
            name: "name",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v1/convai/secrets/secret_id").respondWith().statusCode(200).build();

        const response = await client.conversationalAi.secrets.delete("secret_id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "update", name: "name", value: "value" };
        const rawResponseBody = { type: "stored", secret_id: "secret_id", name: "name" };
        server
            .mockEndpoint()
            .patch("/v1/convai/secrets/secret_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.secrets.update("secret_id", {
            name: "name",
            value: "value",
        });
        expect(response).toEqual({
            type: "stored",
            secretId: "secret_id",
            name: "name",
        });
    });
});
