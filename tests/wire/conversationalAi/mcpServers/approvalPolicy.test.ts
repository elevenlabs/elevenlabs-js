// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";

describe("ApprovalPolicy", () => {
    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { approval_policy: "auto_approve_all" };
        const rawResponseBody = {
            id: "id",
            config: {
                approval_policy: "auto_approve_all",
                tool_approval_hashes: [{ tool_name: "tool_name", tool_hash: "tool_hash" }],
                transport: "SSE",
                url: "url",
                secret_token: { secret_id: "secret_id" },
                request_headers: { key: "value" },
                name: "name",
                description: "description",
                force_pre_tool_speech: true,
                disable_interruptions: true,
            },
            access_info: {
                is_creator: true,
                creator_name: "John Doe",
                creator_email: "john.doe@example.com",
                role: "admin",
            },
            dependent_agents: [
                { type: "available", id: "id", name: "name", created_at_unix_secs: 1, access_level: "admin" },
            ],
            metadata: { created_at: 1, owner_user_id: "owner_user_id" },
        };
        server
            .mockEndpoint()
            .patch("/v1/convai/mcp-servers/mcp_server_id/approval-policy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.mcpServers.approvalPolicy.update("mcp_server_id", {
            approvalPolicy: "auto_approve_all",
        });
        expect(response).toEqual({
            id: "id",
            config: {
                approvalPolicy: "auto_approve_all",
                toolApprovalHashes: [
                    {
                        toolName: "tool_name",
                        toolHash: "tool_hash",
                    },
                ],
                transport: "SSE",
                url: "url",
                secretToken: {
                    secretId: "secret_id",
                },
                requestHeaders: {
                    key: "value",
                },
                name: "name",
                description: "description",
                forcePreToolSpeech: true,
                disableInterruptions: true,
            },
            accessInfo: {
                isCreator: true,
                creatorName: "John Doe",
                creatorEmail: "john.doe@example.com",
                role: "admin",
            },
            dependentAgents: [
                {
                    type: "available",
                    id: "id",
                    name: "name",
                    createdAtUnixSecs: 1,
                    accessLevel: "admin",
                },
            ],
            metadata: {
                createdAt: 1,
                ownerUserId: "owner_user_id",
            },
        });
    });
});
