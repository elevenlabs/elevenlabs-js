/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";

describe("Invocations", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            created_at: 1,
            test_runs: [
                {
                    test_run_id: "test_run_id",
                    test_invocation_id: "test_invocation_id",
                    agent_id: "agent_id",
                    workflow_node_id: "workflow_node_id",
                    status: "pending",
                    agent_responses: [{ role: "user", time_in_call_secs: 1 }],
                    test_id: "test_id",
                    test_name: "test_name",
                    condition_result: { result: "success" },
                    last_updated_at_unix: 1,
                    metadata: {
                        workspace_id: "workspace_id",
                        test_name: "test_name",
                        ran_by_user_email: "ran_by_user_email",
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/convai/test-invocations/test_invocation_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.invocations.get("test_invocation_id");
        expect(response).toEqual({
            id: "id",
            createdAt: 1,
            testRuns: [
                {
                    testRunId: "test_run_id",
                    testInvocationId: "test_invocation_id",
                    agentId: "agent_id",
                    workflowNodeId: "workflow_node_id",
                    status: "pending",
                    agentResponses: [
                        {
                            role: "user",
                            timeInCallSecs: 1,
                        },
                    ],
                    testId: "test_id",
                    testName: "test_name",
                    conditionResult: {
                        result: "success",
                    },
                    lastUpdatedAtUnix: 1,
                    metadata: {
                        workspaceId: "workspace_id",
                        testName: "test_name",
                        ranByUserEmail: "ran_by_user_email",
                    },
                },
            ],
        });
    });

    test("resubmit", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { test_run_ids: ["test_run_ids"], agent_id: "agent_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/convai/test-invocations/test_invocation_id/resubmit")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.invocations.resubmit("test_invocation_id", {
            testRunIds: ["test_run_ids"],
            agentId: "agent_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });
});
