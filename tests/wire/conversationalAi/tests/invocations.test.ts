// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";

describe("Invocations", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            meta: { total: 1, page: 1, page_size: 1 },
            results: [
                {
                    id: "id",
                    created_at_unix_secs: 1,
                    test_run_count: 1,
                    passed_count: 1,
                    failed_count: 1,
                    pending_count: 1,
                    title: "title",
                    access_info: {
                        is_creator: true,
                        creator_name: "John Doe",
                        creator_email: "john.doe@example.com",
                        role: "admin",
                    },
                },
            ],
            next_cursor: "next_cursor",
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/test-invocations")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.invocations.list({
            agentId: "agent_id",
            pageSize: 1,
            cursor: "cursor",
        });
        expect(response).toEqual({
            meta: {
                total: 1,
                page: 1,
                pageSize: 1,
            },
            results: [
                {
                    id: "id",
                    createdAtUnixSecs: 1,
                    testRunCount: 1,
                    passedCount: 1,
                    failedCount: 1,
                    pendingCount: 1,
                    title: "title",
                    accessInfo: {
                        isCreator: true,
                        creatorName: "John Doe",
                        creatorEmail: "john.doe@example.com",
                        role: "admin",
                    },
                },
            ],
            nextCursor: "next_cursor",
            hasMore: true,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            agent_id: "agent_id",
            created_at: 1,
            test_runs: [
                {
                    test_run_id: "test_run_id",
                    test_info: {
                        chat_history: [
                            {
                                role: "user",
                                agent_metadata: undefined,
                                message: undefined,
                                multivoice_message: undefined,
                                feedback: undefined,
                                llm_override: undefined,
                                time_in_call_secs: 1,
                                conversation_turn_metrics: undefined,
                                rag_retrieval_info: undefined,
                                llm_usage: undefined,
                                original_message: undefined,
                                source_medium: undefined,
                            },
                        ],
                        success_condition: "success_condition",
                        success_examples: [{ response: "response", type: "success" }],
                        failure_examples: [{ response: "response", type: "failure" }],
                        tool_call_parameters: undefined,
                        from_conversation_metadata: undefined,
                    },
                    test_invocation_id: "test_invocation_id",
                    agent_id: "agent_id",
                    workflow_node_id: "workflow_node_id",
                    status: "pending",
                    agent_responses: [
                        {
                            role: "user",
                            agent_metadata: undefined,
                            message: undefined,
                            multivoice_message: undefined,
                            feedback: undefined,
                            llm_override: undefined,
                            time_in_call_secs: 1,
                            conversation_turn_metrics: undefined,
                            rag_retrieval_info: undefined,
                            llm_usage: undefined,
                            original_message: undefined,
                            source_medium: undefined,
                        },
                    ],
                    test_id: "test_id",
                    test_name: "test_name",
                    condition_result: { result: "success", rationale: undefined },
                    last_updated_at_unix: 1,
                    metadata: {
                        workspace_id: "workspace_id",
                        test_name: "test_name",
                        ran_by_user_email: "ran_by_user_email",
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/convai/test-invocations/test_invocation_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.invocations.get("test_invocation_id");
        expect(response).toEqual({
            id: "id",
            agentId: "agent_id",
            createdAt: 1,
            testRuns: [
                {
                    testRunId: "test_run_id",
                    testInfo: {
                        chatHistory: [
                            {
                                role: "user",
                                agentMetadata: undefined,
                                message: undefined,
                                multivoiceMessage: undefined,
                                feedback: undefined,
                                llmOverride: undefined,
                                timeInCallSecs: 1,
                                conversationTurnMetrics: undefined,
                                ragRetrievalInfo: undefined,
                                llmUsage: undefined,
                                originalMessage: undefined,
                                sourceMedium: undefined,
                            },
                        ],
                        successCondition: "success_condition",
                        successExamples: [
                            {
                                response: "response",
                                type: "success",
                            },
                        ],
                        failureExamples: [
                            {
                                response: "response",
                                type: "failure",
                            },
                        ],
                        toolCallParameters: undefined,
                        fromConversationMetadata: undefined,
                    },
                    testInvocationId: "test_invocation_id",
                    agentId: "agent_id",
                    workflowNodeId: "workflow_node_id",
                    status: "pending",
                    agentResponses: [
                        {
                            role: "user",
                            agentMetadata: undefined,
                            message: undefined,
                            multivoiceMessage: undefined,
                            feedback: undefined,
                            llmOverride: undefined,
                            timeInCallSecs: 1,
                            conversationTurnMetrics: undefined,
                            ragRetrievalInfo: undefined,
                            llmUsage: undefined,
                            originalMessage: undefined,
                            sourceMedium: undefined,
                        },
                    ],
                    testId: "test_id",
                    testName: "test_name",
                    conditionResult: {
                        result: "success",
                        rationale: undefined,
                    },
                    lastUpdatedAtUnix: 1,
                    metadata: {
                        workspaceId: "workspace_id",
                        testName: "test_name",
                        ranByUserEmail: "ran_by_user_email",
                    },
                },
            ],
        });
    });

    test("resubmit", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { test_run_ids: ["test_run_ids"], agent_id: "agent_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/convai/test-invocations/test_invocation_id/resubmit")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.tests.invocations.resubmit("test_invocation_id", {
            testRunIds: ["test_run_ids"],
            agentId: "agent_id",
        });
        expect(response).toEqual({
            key: "value",
        });
    });
});
