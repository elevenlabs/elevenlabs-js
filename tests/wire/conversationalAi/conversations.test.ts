/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("Conversations", () => {
    test("get_signed_url", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { signed_url: "signed_url" };
        server
            .mockEndpoint()
            .get("/v1/convai/conversation/get-signed-url")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.conversations.getSignedUrl({
            agentId: "21m00Tcm4TlvDq8ikWAM",
        });
        expect(response).toEqual({
            signedUrl: "signed_url",
        });
    });

    test("get_webrtc_token", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { token: "token" };
        server
            .mockEndpoint()
            .get("/v1/convai/conversation/token")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.conversations.getWebrtcToken({
            agentId: "21m00Tcm4TlvDq8ikWAM",
        });
        expect(response).toEqual({
            token: "token",
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            conversations: [
                {
                    agent_id: "agent_id",
                    agent_name: "agent_name",
                    conversation_id: "conversation_id",
                    start_time_unix_secs: 1,
                    call_duration_secs: 1,
                    message_count: 1,
                    status: "initiated",
                    call_successful: "success",
                    transcript_summary: "transcript_summary",
                    call_summary_title: "call_summary_title",
                },
            ],
            next_cursor: "next_cursor",
            has_more: true,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/conversations")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.conversations.list();
        expect(response).toEqual({
            conversations: [
                {
                    agentId: "agent_id",
                    agentName: "agent_name",
                    conversationId: "conversation_id",
                    startTimeUnixSecs: 1,
                    callDurationSecs: 1,
                    messageCount: 1,
                    status: "initiated",
                    callSuccessful: "success",
                    transcriptSummary: "transcript_summary",
                    callSummaryTitle: "call_summary_title",
                },
            ],
            nextCursor: "next_cursor",
            hasMore: true,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            agent_id: "123",
            conversation_id: "123",
            status: "processing",
            transcript: [{ role: "user", message: "Hello, how are you?", time_in_call_secs: 10 }],
            metadata: { start_time_unix_secs: 1714423232, call_duration_secs: 10 },
            has_audio: true,
            has_user_audio: true,
            has_response_audio: true,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/conversations/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.conversations.get("123");
        expect(response).toEqual({
            agentId: "123",
            conversationId: "123",
            status: "processing",
            transcript: [
                {
                    role: "user",
                    message: "Hello, how are you?",
                    timeInCallSecs: 10,
                },
            ],
            metadata: {
                startTimeUnixSecs: 1714423232,
                callDurationSecs: 10,
            },
            hasAudio: true,
            hasUserAudio: true,
            hasResponseAudio: true,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/convai/conversations/21m00Tcm4TlvDq8ikWAM")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.conversations.delete("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            key: "value",
        });
    });
});
