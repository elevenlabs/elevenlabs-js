// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../src/Client";

describe("History", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            history: [
                {
                    history_item_id: "ja9xsmfGhxYcymxGcOGB",
                    request_id: "BF0BZg4IwLGBlaVjv9Im",
                    voice_id: "21m00Tcm4TlvDq8ikWAM",
                    model_id: "eleven_multilingual_v2",
                    voice_name: "Rachel",
                    voice_category: "premade",
                    text: "Hello, world!",
                    date_unix: 1714650306,
                    character_count_change_from: 17189,
                    character_count_change_to: 17231,
                    content_type: "audio/mpeg",
                    state: "created",
                    settings: { similarity_boost: 0.5, stability: 0.71, style: 0, use_speaker_boost: true },
                    feedback: {
                        thumbs_up: true,
                        feedback: "This is an example of test feedback.",
                        emotions: true,
                        inaccurate_clone: false,
                        glitches: true,
                        audio_quality: true,
                        other: false,
                        review_status: "not_reviewed",
                    },
                    share_link_id: "share_link_id",
                    source: "TTS",
                    alignments: {
                        alignment: {
                            characters: ["characters"],
                            character_start_times_seconds: [1.1],
                            character_end_times_seconds: [1.1],
                        },
                        normalized_alignment: {
                            characters: ["characters"],
                            character_start_times_seconds: [1.1],
                            character_end_times_seconds: [1.1],
                        },
                    },
                    dialogue: [{ text: "text", voice_id: "voice_id", voice_name: "voice_name" }],
                },
            ],
            last_history_item_id: "ja9xsmfGhxYcymxGcOGB",
            has_more: true,
            scanned_until: 1714650306,
        };
        server.mockEndpoint().get("/v1/history").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.history.list({
            pageSize: 1,
            startAfterHistoryItemId: "start_after_history_item_id",
            voiceId: "voice_id",
            modelId: "model_id",
            dateBeforeUnix: 1,
            dateAfterUnix: 1,
            sortDirection: "asc",
            search: "search",
            source: "TTS",
        });
        expect(response).toEqual({
            history: [
                {
                    historyItemId: "ja9xsmfGhxYcymxGcOGB",
                    requestId: "BF0BZg4IwLGBlaVjv9Im",
                    voiceId: "21m00Tcm4TlvDq8ikWAM",
                    modelId: "eleven_multilingual_v2",
                    voiceName: "Rachel",
                    voiceCategory: "premade",
                    text: "Hello, world!",
                    dateUnix: 1714650306,
                    characterCountChangeFrom: 17189,
                    characterCountChangeTo: 17231,
                    contentType: "audio/mpeg",
                    state: "created",
                    settings: {
                        similarity_boost: 0.5,
                        stability: 0.71,
                        style: 0,
                        use_speaker_boost: true,
                    },
                    feedback: {
                        thumbsUp: true,
                        feedback: "This is an example of test feedback.",
                        emotions: true,
                        inaccurateClone: false,
                        glitches: true,
                        audioQuality: true,
                        other: false,
                        reviewStatus: "not_reviewed",
                    },
                    shareLinkId: "share_link_id",
                    source: "TTS",
                    alignments: {
                        alignment: {
                            characters: ["characters"],
                            characterStartTimesSeconds: [1.1],
                            characterEndTimesSeconds: [1.1],
                        },
                        normalizedAlignment: {
                            characters: ["characters"],
                            characterStartTimesSeconds: [1.1],
                            characterEndTimesSeconds: [1.1],
                        },
                    },
                    dialogue: [
                        {
                            text: "text",
                            voiceId: "voice_id",
                            voiceName: "voice_name",
                        },
                    ],
                },
            ],
            lastHistoryItemId: "ja9xsmfGhxYcymxGcOGB",
            hasMore: true,
            scannedUntil: 1714650306,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            history_item_id: "ja9xsmfGhxYcymxGcOGB",
            request_id: "BF0BZg4IwLGBlaVjv9Im",
            voice_id: "21m00Tcm4TlvDq8ikWAM",
            model_id: "eleven_multilingual_v2",
            voice_name: "Rachel",
            voice_category: "premade",
            text: "Hello, world!",
            date_unix: 1714650306,
            character_count_change_from: 17189,
            character_count_change_to: 17231,
            content_type: "audio/mpeg",
            state: "created",
            settings: { similarity_boost: 0.5, stability: 0.71, style: 0, use_speaker_boost: true },
            feedback: {
                thumbs_up: true,
                feedback: "This is an example of test feedback.",
                emotions: true,
                inaccurate_clone: false,
                glitches: true,
                audio_quality: true,
                other: false,
                review_status: "not_reviewed",
            },
            share_link_id: "share_link_id",
            source: "TTS",
            alignments: {
                alignment: {
                    characters: ["characters"],
                    character_start_times_seconds: [1.1],
                    character_end_times_seconds: [1.1],
                },
                normalized_alignment: {
                    characters: ["characters"],
                    character_start_times_seconds: [1.1],
                    character_end_times_seconds: [1.1],
                },
            },
            dialogue: [{ text: "text", voice_id: "voice_id", voice_name: "voice_name" }],
        };
        server
            .mockEndpoint()
            .get("/v1/history/VW7YKqPnjY4h39yTbx2L")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.history.get("VW7YKqPnjY4h39yTbx2L");
        expect(response).toEqual({
            historyItemId: "ja9xsmfGhxYcymxGcOGB",
            requestId: "BF0BZg4IwLGBlaVjv9Im",
            voiceId: "21m00Tcm4TlvDq8ikWAM",
            modelId: "eleven_multilingual_v2",
            voiceName: "Rachel",
            voiceCategory: "premade",
            text: "Hello, world!",
            dateUnix: 1714650306,
            characterCountChangeFrom: 17189,
            characterCountChangeTo: 17231,
            contentType: "audio/mpeg",
            state: "created",
            settings: {
                similarity_boost: 0.5,
                stability: 0.71,
                style: 0,
                use_speaker_boost: true,
            },
            feedback: {
                thumbsUp: true,
                feedback: "This is an example of test feedback.",
                emotions: true,
                inaccurateClone: false,
                glitches: true,
                audioQuality: true,
                other: false,
                reviewStatus: "not_reviewed",
            },
            shareLinkId: "share_link_id",
            source: "TTS",
            alignments: {
                alignment: {
                    characters: ["characters"],
                    characterStartTimesSeconds: [1.1],
                    characterEndTimesSeconds: [1.1],
                },
                normalizedAlignment: {
                    characters: ["characters"],
                    characterStartTimesSeconds: [1.1],
                    characterEndTimesSeconds: [1.1],
                },
            },
            dialogue: [
                {
                    text: "text",
                    voiceId: "voice_id",
                    voiceName: "voice_name",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .delete("/v1/history/VW7YKqPnjY4h39yTbx2L")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.history.delete("VW7YKqPnjY4h39yTbx2L");
        expect(response).toEqual({
            status: "ok",
        });
    });
});
